
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800411c  0800411c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000078  0800419c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800419c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a46  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e4  00000000  00000000  00028aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dd8  00000000  00000000  00040873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d94  00000000  00000000  0004964b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000207c  00000000  00000000  000cf430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003df0 	.word	0x08003df0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003df0 	.word	0x08003df0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_d2uiz>:
 8000708:	004a      	lsls	r2, r1, #1
 800070a:	d211      	bcs.n	8000730 <__aeabi_d2uiz+0x28>
 800070c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000710:	d211      	bcs.n	8000736 <__aeabi_d2uiz+0x2e>
 8000712:	d50d      	bpl.n	8000730 <__aeabi_d2uiz+0x28>
 8000714:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000718:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800071c:	d40e      	bmi.n	800073c <__aeabi_d2uiz+0x34>
 800071e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000726:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800072a:	fa23 f002 	lsr.w	r0, r3, r2
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800073a:	d102      	bne.n	8000742 <__aeabi_d2uiz+0x3a>
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b974 	b.w	8000a48 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f806 	bl	8000778 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__udivmoddi4>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	9d08      	ldr	r5, [sp, #32]
 800077e:	4604      	mov	r4, r0
 8000780:	468e      	mov	lr, r1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d14d      	bne.n	8000822 <__udivmoddi4+0xaa>
 8000786:	428a      	cmp	r2, r1
 8000788:	4694      	mov	ip, r2
 800078a:	d969      	bls.n	8000860 <__udivmoddi4+0xe8>
 800078c:	fab2 f282 	clz	r2, r2
 8000790:	b152      	cbz	r2, 80007a8 <__udivmoddi4+0x30>
 8000792:	fa01 f302 	lsl.w	r3, r1, r2
 8000796:	f1c2 0120 	rsb	r1, r2, #32
 800079a:	fa20 f101 	lsr.w	r1, r0, r1
 800079e:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a2:	ea41 0e03 	orr.w	lr, r1, r3
 80007a6:	4094      	lsls	r4, r2
 80007a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ac:	0c21      	lsrs	r1, r4, #16
 80007ae:	fbbe f6f8 	udiv	r6, lr, r8
 80007b2:	fa1f f78c 	uxth.w	r7, ip
 80007b6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007be:	fb06 f107 	mul.w	r1, r6, r7
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d90a      	bls.n	80007dc <__udivmoddi4+0x64>
 80007c6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80007ce:	f080 811f 	bcs.w	8000a10 <__udivmoddi4+0x298>
 80007d2:	4299      	cmp	r1, r3
 80007d4:	f240 811c 	bls.w	8000a10 <__udivmoddi4+0x298>
 80007d8:	3e02      	subs	r6, #2
 80007da:	4463      	add	r3, ip
 80007dc:	1a5b      	subs	r3, r3, r1
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e4:	fb08 3310 	mls	r3, r8, r0, r3
 80007e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ec:	fb00 f707 	mul.w	r7, r0, r7
 80007f0:	42a7      	cmp	r7, r4
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x92>
 80007f4:	eb1c 0404 	adds.w	r4, ip, r4
 80007f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fc:	f080 810a 	bcs.w	8000a14 <__udivmoddi4+0x29c>
 8000800:	42a7      	cmp	r7, r4
 8000802:	f240 8107 	bls.w	8000a14 <__udivmoddi4+0x29c>
 8000806:	4464      	add	r4, ip
 8000808:	3802      	subs	r0, #2
 800080a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800080e:	1be4      	subs	r4, r4, r7
 8000810:	2600      	movs	r6, #0
 8000812:	b11d      	cbz	r5, 800081c <__udivmoddi4+0xa4>
 8000814:	40d4      	lsrs	r4, r2
 8000816:	2300      	movs	r3, #0
 8000818:	e9c5 4300 	strd	r4, r3, [r5]
 800081c:	4631      	mov	r1, r6
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	428b      	cmp	r3, r1
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0xc2>
 8000826:	2d00      	cmp	r5, #0
 8000828:	f000 80ef 	beq.w	8000a0a <__udivmoddi4+0x292>
 800082c:	2600      	movs	r6, #0
 800082e:	e9c5 0100 	strd	r0, r1, [r5]
 8000832:	4630      	mov	r0, r6
 8000834:	4631      	mov	r1, r6
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	fab3 f683 	clz	r6, r3
 800083e:	2e00      	cmp	r6, #0
 8000840:	d14a      	bne.n	80008d8 <__udivmoddi4+0x160>
 8000842:	428b      	cmp	r3, r1
 8000844:	d302      	bcc.n	800084c <__udivmoddi4+0xd4>
 8000846:	4282      	cmp	r2, r0
 8000848:	f200 80f9 	bhi.w	8000a3e <__udivmoddi4+0x2c6>
 800084c:	1a84      	subs	r4, r0, r2
 800084e:	eb61 0303 	sbc.w	r3, r1, r3
 8000852:	2001      	movs	r0, #1
 8000854:	469e      	mov	lr, r3
 8000856:	2d00      	cmp	r5, #0
 8000858:	d0e0      	beq.n	800081c <__udivmoddi4+0xa4>
 800085a:	e9c5 4e00 	strd	r4, lr, [r5]
 800085e:	e7dd      	b.n	800081c <__udivmoddi4+0xa4>
 8000860:	b902      	cbnz	r2, 8000864 <__udivmoddi4+0xec>
 8000862:	deff      	udf	#255	; 0xff
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	2a00      	cmp	r2, #0
 800086a:	f040 8092 	bne.w	8000992 <__udivmoddi4+0x21a>
 800086e:	eba1 010c 	sub.w	r1, r1, ip
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f fe8c 	uxth.w	lr, ip
 800087a:	2601      	movs	r6, #1
 800087c:	0c20      	lsrs	r0, r4, #16
 800087e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000882:	fb07 1113 	mls	r1, r7, r3, r1
 8000886:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800088a:	fb0e f003 	mul.w	r0, lr, r3
 800088e:	4288      	cmp	r0, r1
 8000890:	d908      	bls.n	80008a4 <__udivmoddi4+0x12c>
 8000892:	eb1c 0101 	adds.w	r1, ip, r1
 8000896:	f103 38ff 	add.w	r8, r3, #4294967295
 800089a:	d202      	bcs.n	80008a2 <__udivmoddi4+0x12a>
 800089c:	4288      	cmp	r0, r1
 800089e:	f200 80cb 	bhi.w	8000a38 <__udivmoddi4+0x2c0>
 80008a2:	4643      	mov	r3, r8
 80008a4:	1a09      	subs	r1, r1, r0
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ac:	fb07 1110 	mls	r1, r7, r0, r1
 80008b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008b4:	fb0e fe00 	mul.w	lr, lr, r0
 80008b8:	45a6      	cmp	lr, r4
 80008ba:	d908      	bls.n	80008ce <__udivmoddi4+0x156>
 80008bc:	eb1c 0404 	adds.w	r4, ip, r4
 80008c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c4:	d202      	bcs.n	80008cc <__udivmoddi4+0x154>
 80008c6:	45a6      	cmp	lr, r4
 80008c8:	f200 80bb 	bhi.w	8000a42 <__udivmoddi4+0x2ca>
 80008cc:	4608      	mov	r0, r1
 80008ce:	eba4 040e 	sub.w	r4, r4, lr
 80008d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008d6:	e79c      	b.n	8000812 <__udivmoddi4+0x9a>
 80008d8:	f1c6 0720 	rsb	r7, r6, #32
 80008dc:	40b3      	lsls	r3, r6
 80008de:	fa22 fc07 	lsr.w	ip, r2, r7
 80008e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008e6:	fa20 f407 	lsr.w	r4, r0, r7
 80008ea:	fa01 f306 	lsl.w	r3, r1, r6
 80008ee:	431c      	orrs	r4, r3
 80008f0:	40f9      	lsrs	r1, r7
 80008f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008f6:	fa00 f306 	lsl.w	r3, r0, r6
 80008fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008fe:	0c20      	lsrs	r0, r4, #16
 8000900:	fa1f fe8c 	uxth.w	lr, ip
 8000904:	fb09 1118 	mls	r1, r9, r8, r1
 8000908:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090c:	fb08 f00e 	mul.w	r0, r8, lr
 8000910:	4288      	cmp	r0, r1
 8000912:	fa02 f206 	lsl.w	r2, r2, r6
 8000916:	d90b      	bls.n	8000930 <__udivmoddi4+0x1b8>
 8000918:	eb1c 0101 	adds.w	r1, ip, r1
 800091c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000920:	f080 8088 	bcs.w	8000a34 <__udivmoddi4+0x2bc>
 8000924:	4288      	cmp	r0, r1
 8000926:	f240 8085 	bls.w	8000a34 <__udivmoddi4+0x2bc>
 800092a:	f1a8 0802 	sub.w	r8, r8, #2
 800092e:	4461      	add	r1, ip
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f9 	udiv	r0, r1, r9
 8000938:	fb09 1110 	mls	r1, r9, r0, r1
 800093c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000940:	fb00 fe0e 	mul.w	lr, r0, lr
 8000944:	458e      	cmp	lr, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x1e2>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000950:	d26c      	bcs.n	8000a2c <__udivmoddi4+0x2b4>
 8000952:	458e      	cmp	lr, r1
 8000954:	d96a      	bls.n	8000a2c <__udivmoddi4+0x2b4>
 8000956:	3802      	subs	r0, #2
 8000958:	4461      	add	r1, ip
 800095a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800095e:	fba0 9402 	umull	r9, r4, r0, r2
 8000962:	eba1 010e 	sub.w	r1, r1, lr
 8000966:	42a1      	cmp	r1, r4
 8000968:	46c8      	mov	r8, r9
 800096a:	46a6      	mov	lr, r4
 800096c:	d356      	bcc.n	8000a1c <__udivmoddi4+0x2a4>
 800096e:	d053      	beq.n	8000a18 <__udivmoddi4+0x2a0>
 8000970:	b15d      	cbz	r5, 800098a <__udivmoddi4+0x212>
 8000972:	ebb3 0208 	subs.w	r2, r3, r8
 8000976:	eb61 010e 	sbc.w	r1, r1, lr
 800097a:	fa01 f707 	lsl.w	r7, r1, r7
 800097e:	fa22 f306 	lsr.w	r3, r2, r6
 8000982:	40f1      	lsrs	r1, r6
 8000984:	431f      	orrs	r7, r3
 8000986:	e9c5 7100 	strd	r7, r1, [r5]
 800098a:	2600      	movs	r6, #0
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	f1c2 0320 	rsb	r3, r2, #32
 8000996:	40d8      	lsrs	r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	fa21 f303 	lsr.w	r3, r1, r3
 80009a0:	4091      	lsls	r1, r2
 80009a2:	4301      	orrs	r1, r0
 80009a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a8:	fa1f fe8c 	uxth.w	lr, ip
 80009ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80009b0:	fb07 3610 	mls	r6, r7, r0, r3
 80009b4:	0c0b      	lsrs	r3, r1, #16
 80009b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ba:	fb00 f60e 	mul.w	r6, r0, lr
 80009be:	429e      	cmp	r6, r3
 80009c0:	fa04 f402 	lsl.w	r4, r4, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x260>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80009ce:	d22f      	bcs.n	8000a30 <__udivmoddi4+0x2b8>
 80009d0:	429e      	cmp	r6, r3
 80009d2:	d92d      	bls.n	8000a30 <__udivmoddi4+0x2b8>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1b9b      	subs	r3, r3, r6
 80009da:	b289      	uxth	r1, r1
 80009dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80009e0:	fb07 3316 	mls	r3, r7, r6, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x28a>
 80009f0:	eb1c 0101 	adds.w	r1, ip, r1
 80009f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009f8:	d216      	bcs.n	8000a28 <__udivmoddi4+0x2b0>
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d914      	bls.n	8000a28 <__udivmoddi4+0x2b0>
 80009fe:	3e02      	subs	r6, #2
 8000a00:	4461      	add	r1, ip
 8000a02:	1ac9      	subs	r1, r1, r3
 8000a04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a08:	e738      	b.n	800087c <__udivmoddi4+0x104>
 8000a0a:	462e      	mov	r6, r5
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	e705      	b.n	800081c <__udivmoddi4+0xa4>
 8000a10:	4606      	mov	r6, r0
 8000a12:	e6e3      	b.n	80007dc <__udivmoddi4+0x64>
 8000a14:	4618      	mov	r0, r3
 8000a16:	e6f8      	b.n	800080a <__udivmoddi4+0x92>
 8000a18:	454b      	cmp	r3, r9
 8000a1a:	d2a9      	bcs.n	8000970 <__udivmoddi4+0x1f8>
 8000a1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a24:	3801      	subs	r0, #1
 8000a26:	e7a3      	b.n	8000970 <__udivmoddi4+0x1f8>
 8000a28:	4646      	mov	r6, r8
 8000a2a:	e7ea      	b.n	8000a02 <__udivmoddi4+0x28a>
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	e794      	b.n	800095a <__udivmoddi4+0x1e2>
 8000a30:	4640      	mov	r0, r8
 8000a32:	e7d1      	b.n	80009d8 <__udivmoddi4+0x260>
 8000a34:	46d0      	mov	r8, sl
 8000a36:	e77b      	b.n	8000930 <__udivmoddi4+0x1b8>
 8000a38:	3b02      	subs	r3, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	e732      	b.n	80008a4 <__udivmoddi4+0x12c>
 8000a3e:	4630      	mov	r0, r6
 8000a40:	e709      	b.n	8000856 <__udivmoddi4+0xde>
 8000a42:	4464      	add	r4, ip
 8000a44:	3802      	subs	r0, #2
 8000a46:	e742      	b.n	80008ce <__udivmoddi4+0x156>

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fc70 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f820 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 f8b2 	bl	8000bc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a5c:	f000 f886 	bl	8000b6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(str, "\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\nLED Frequency : %d", ledfreq);
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <main+0x38>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <main+0x3c>)
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <main+0x40>)
 8000a6a:	f002 fccf 	bl	800340c <siprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //uart_poll();

	  HAL_UART_Receive_IT(&huart2, rx_buf, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <main+0x44>)
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <main+0x48>)
 8000a74:	f001 fd6e 	bl	8002554 <HAL_UART_Receive_IT>
	  led();
 8000a78:	f000 faf2 	bl	8001060 <led>
	  fsm();
 8000a7c:	f000 f91e 	bl	8000cbc <fsm>
	  HAL_UART_Receive_IT(&huart2, rx_buf, 1);
 8000a80:	e7f5      	b.n	8000a6e <main+0x22>
 8000a82:	bf00      	nop
 8000a84:	20000005 	.word	0x20000005
 8000a88:	08003e08 	.word	0x08003e08
 8000a8c:	200000e0 	.word	0x200000e0
 8000a90:	200000d8 	.word	0x200000d8
 8000a94:	20000094 	.word	0x20000094

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fca8 	bl	80033fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <SystemClock_Config+0xcc>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xcc>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <SystemClock_Config+0xd0>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <SystemClock_Config+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b12:	2304      	movs	r3, #4
 8000b14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 ffee 	bl	8001b00 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b2a:	f000 fadf 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2302      	movs	r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fa50 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b56:	f000 fac9 	bl	80010ec <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	; 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART2_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b78:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f001 fc44 	bl	8002430 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 fa9d 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000094 	.word	0x20000094
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a2c      	ldr	r2, [pc, #176]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2120      	movs	r1, #32
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0xd4>)
 8000c4c:	f000 ff24 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_GPIO_Init+0xd8>)
 8000c68:	f000 fd7a 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0xd4>)
 8000c84:	f000 fd6c 	bl	8001760 <HAL_GPIO_Init>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020800 	.word	0x40020800

08000c9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){action = 0;}
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_UART_RxCpltCallback+0x1c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000004 	.word	0x20000004

08000cbc <fsm>:
void fsm(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	switch(state){
 8000cc0:	4ba0      	ldr	r3, [pc, #640]	; (8000f44 <fsm+0x288>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	f000 815f 	beq.w	8000f88 <fsm+0x2cc>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	f300 81af 	bgt.w	800102e <fsm+0x372>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <fsm+0x1e>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d04d      	beq.n	8000d74 <fsm+0xb8>
			action = 1;
			HAL_UART_Transmit_IT(&huart2,"Wrong Button Pressed!\r\n", 23);
		}
		break;
	}
}
 8000cd8:	e1a9      	b.n	800102e <fsm+0x372>
		if(startup == 0){
 8000cda:	4b9b      	ldr	r3, [pc, #620]	; (8000f48 <fsm+0x28c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <fsm+0x36>
			HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\n0 : LED Control\r\n1 : Button Status\r\n", 66);
 8000ce2:	2242      	movs	r2, #66	; 0x42
 8000ce4:	4999      	ldr	r1, [pc, #612]	; (8000f4c <fsm+0x290>)
 8000ce6:	489a      	ldr	r0, [pc, #616]	; (8000f50 <fsm+0x294>)
 8000ce8:	f001 fbef 	bl	80024ca <HAL_UART_Transmit_IT>
			startup = 1;
 8000cec:	4b96      	ldr	r3, [pc, #600]	; (8000f48 <fsm+0x28c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
		if(action == 0 && rx_buf[0] == '0'){
 8000cf2:	4b98      	ldr	r3, [pc, #608]	; (8000f54 <fsm+0x298>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <fsm+0x5e>
 8000cfa:	4b97      	ldr	r3, [pc, #604]	; (8000f58 <fsm+0x29c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b30      	cmp	r3, #48	; 0x30
 8000d00:	d10b      	bne.n	8000d1a <fsm+0x5e>
			action = 1;
 8000d02:	4b94      	ldr	r3, [pc, #592]	; (8000f54 <fsm+0x298>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\n", 92);
 8000d08:	225c      	movs	r2, #92	; 0x5c
 8000d0a:	4994      	ldr	r1, [pc, #592]	; (8000f5c <fsm+0x2a0>)
 8000d0c:	4890      	ldr	r0, [pc, #576]	; (8000f50 <fsm+0x294>)
 8000d0e:	f001 fbdc 	bl	80024ca <HAL_UART_Transmit_IT>
			state = 1;
 8000d12:	4b8c      	ldr	r3, [pc, #560]	; (8000f44 <fsm+0x288>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e02b      	b.n	8000d72 <fsm+0xb6>
		else if(action == 0 && rx_buf[0] == '1'){
 8000d1a:	4b8e      	ldr	r3, [pc, #568]	; (8000f54 <fsm+0x298>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <fsm+0x86>
 8000d22:	4b8d      	ldr	r3, [pc, #564]	; (8000f58 <fsm+0x29c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b31      	cmp	r3, #49	; 0x31
 8000d28:	d10b      	bne.n	8000d42 <fsm+0x86>
			action = 1;
 8000d2a:	4b8a      	ldr	r3, [pc, #552]	; (8000f54 <fsm+0x298>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\nx : Back\r\n", 40);
 8000d30:	2228      	movs	r2, #40	; 0x28
 8000d32:	498b      	ldr	r1, [pc, #556]	; (8000f60 <fsm+0x2a4>)
 8000d34:	4886      	ldr	r0, [pc, #536]	; (8000f50 <fsm+0x294>)
 8000d36:	f001 fbc8 	bl	80024ca <HAL_UART_Transmit_IT>
			state = 2;
 8000d3a:	4b82      	ldr	r3, [pc, #520]	; (8000f44 <fsm+0x288>)
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e017      	b.n	8000d72 <fsm+0xb6>
		else if(action == 0 && rx_buf[0] != '1' && rx_buf[0] != '0'){
 8000d42:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <fsm+0x298>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 816c 	bne.w	8001024 <fsm+0x368>
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <fsm+0x29c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b31      	cmp	r3, #49	; 0x31
 8000d52:	f000 8167 	beq.w	8001024 <fsm+0x368>
 8000d56:	4b80      	ldr	r3, [pc, #512]	; (8000f58 <fsm+0x29c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b30      	cmp	r3, #48	; 0x30
 8000d5c:	f000 8162 	beq.w	8001024 <fsm+0x368>
			action = 1;
 8000d60:	4b7c      	ldr	r3, [pc, #496]	; (8000f54 <fsm+0x298>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"Wrong Button Pressed!\r\n", 23);
 8000d66:	2217      	movs	r2, #23
 8000d68:	497e      	ldr	r1, [pc, #504]	; (8000f64 <fsm+0x2a8>)
 8000d6a:	4879      	ldr	r0, [pc, #484]	; (8000f50 <fsm+0x294>)
 8000d6c:	f001 fbad 	bl	80024ca <HAL_UART_Transmit_IT>
		break;
 8000d70:	e158      	b.n	8001024 <fsm+0x368>
 8000d72:	e157      	b.n	8001024 <fsm+0x368>
		if(action == 0 && rx_buf[0] == 'x'){
 8000d74:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <fsm+0x298>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10f      	bne.n	8000d9c <fsm+0xe0>
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <fsm+0x29c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b78      	cmp	r3, #120	; 0x78
 8000d82:	d10b      	bne.n	8000d9c <fsm+0xe0>
			action = 1;
 8000d84:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <fsm+0x298>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000d8a:	4b6e      	ldr	r3, [pc, #440]	; (8000f44 <fsm+0x288>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\n0 : LED Control\r\n1 : Button Status\r\n", 66);
 8000d90:	2242      	movs	r2, #66	; 0x42
 8000d92:	496e      	ldr	r1, [pc, #440]	; (8000f4c <fsm+0x290>)
 8000d94:	486e      	ldr	r0, [pc, #440]	; (8000f50 <fsm+0x294>)
 8000d96:	f001 fb98 	bl	80024ca <HAL_UART_Transmit_IT>
 8000d9a:	e0d2      	b.n	8000f42 <fsm+0x286>
		else if(action == 0 && rx_buf[0] == 'a'){
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <fsm+0x298>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d141      	bne.n	8000e28 <fsm+0x16c>
 8000da4:	4b6c      	ldr	r3, [pc, #432]	; (8000f58 <fsm+0x29c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b61      	cmp	r3, #97	; 0x61
 8000daa:	d13d      	bne.n	8000e28 <fsm+0x16c>
			action = 1;
 8000dac:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <fsm+0x298>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
			led_spd = (500*led_spd)/(500+led_spd);
 8000db2:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <fsm+0x2ac>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000f6c <fsm+0x2b0>
 8000dbc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000dc0:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <fsm+0x2ac>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000f6c <fsm+0x2b0>
 8000dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <fsm+0x2ac>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
			ledfreq = ceil(500/led_spd);
 8000dd8:	4b63      	ldr	r3, [pc, #396]	; (8000f68 <fsm+0x2ac>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000f6c <fsm+0x2b0>
 8000de2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000de6:	ee16 0a90 	vmov	r0, s13
 8000dea:	f7ff fbad 	bl	8000548 <__aeabi_f2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	ec43 2b10 	vmov	d0, r2, r3
 8000df6:	f002 ff77 	bl	8003ce8 <ceil>
 8000dfa:	ec53 2b10 	vmov	r2, r3, d0
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fc81 	bl	8000708 <__aeabi_d2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <fsm+0x2b4>)
 8000e0c:	701a      	strb	r2, [r3, #0]
			sprintf(str, "\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\nLED Frequency : %d", ledfreq);
 8000e0e:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <fsm+0x2b4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4957      	ldr	r1, [pc, #348]	; (8000f74 <fsm+0x2b8>)
 8000e16:	4858      	ldr	r0, [pc, #352]	; (8000f78 <fsm+0x2bc>)
 8000e18:	f002 faf8 	bl	800340c <siprintf>
			HAL_UART_Transmit_IT(&huart2, str, 110);
 8000e1c:	226e      	movs	r2, #110	; 0x6e
 8000e1e:	4956      	ldr	r1, [pc, #344]	; (8000f78 <fsm+0x2bc>)
 8000e20:	484b      	ldr	r0, [pc, #300]	; (8000f50 <fsm+0x294>)
 8000e22:	f001 fb52 	bl	80024ca <HAL_UART_Transmit_IT>
		else if(action == 0 && rx_buf[0] == 'a'){
 8000e26:	e08c      	b.n	8000f42 <fsm+0x286>
		else if(action == 0 && rx_buf[0] == 's'){
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <fsm+0x298>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d141      	bne.n	8000eb4 <fsm+0x1f8>
 8000e30:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <fsm+0x29c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b73      	cmp	r3, #115	; 0x73
 8000e36:	d13d      	bne.n	8000eb4 <fsm+0x1f8>
			action = 1;
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <fsm+0x298>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
			led_spd = (500*led_spd)/(500-led_spd);
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <fsm+0x2ac>)
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000f6c <fsm+0x2b0>
 8000e48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e4c:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <fsm+0x2ac>)
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000f6c <fsm+0x2b0>
 8000e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <fsm+0x2ac>)
 8000e60:	edc3 7a00 	vstr	s15, [r3]
			ledfreq = ceil(500/led_spd);
 8000e64:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <fsm+0x2ac>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000f6c <fsm+0x2b0>
 8000e6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e72:	ee16 0a90 	vmov	r0, s13
 8000e76:	f7ff fb67 	bl	8000548 <__aeabi_f2d>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	ec43 2b10 	vmov	d0, r2, r3
 8000e82:	f002 ff31 	bl	8003ce8 <ceil>
 8000e86:	ec53 2b10 	vmov	r2, r3, d0
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fc3b 	bl	8000708 <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <fsm+0x2b4>)
 8000e98:	701a      	strb	r2, [r3, #0]
			sprintf(str, "\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\nLED Frequency : %d", ledfreq);
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <fsm+0x2b4>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4934      	ldr	r1, [pc, #208]	; (8000f74 <fsm+0x2b8>)
 8000ea2:	4835      	ldr	r0, [pc, #212]	; (8000f78 <fsm+0x2bc>)
 8000ea4:	f002 fab2 	bl	800340c <siprintf>
			HAL_UART_Transmit_IT(&huart2, str, 110);
 8000ea8:	226e      	movs	r2, #110	; 0x6e
 8000eaa:	4933      	ldr	r1, [pc, #204]	; (8000f78 <fsm+0x2bc>)
 8000eac:	4828      	ldr	r0, [pc, #160]	; (8000f50 <fsm+0x294>)
 8000eae:	f001 fb0c 	bl	80024ca <HAL_UART_Transmit_IT>
		else if(action == 0 && rx_buf[0] == 's'){
 8000eb2:	e046      	b.n	8000f42 <fsm+0x286>
		else if(action == 0 && rx_buf[0] == 'd'){
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <fsm+0x298>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d120      	bne.n	8000efe <fsm+0x242>
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <fsm+0x29c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d11c      	bne.n	8000efe <fsm+0x242>
			action = 1;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <fsm+0x298>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
			if(led_off == 0){
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <fsm+0x2c0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d108      	bne.n	8000ee4 <fsm+0x228>
				led_off = 1;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <fsm+0x2c0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\nLED Turned Off!\r", 109);
 8000ed8:	226d      	movs	r2, #109	; 0x6d
 8000eda:	4929      	ldr	r1, [pc, #164]	; (8000f80 <fsm+0x2c4>)
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <fsm+0x294>)
 8000ede:	f001 faf4 	bl	80024ca <HAL_UART_Transmit_IT>
			if(led_off == 0){
 8000ee2:	e02d      	b.n	8000f40 <fsm+0x284>
			else if(led_off == 1){
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <fsm+0x2c0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d129      	bne.n	8000f40 <fsm+0x284>
				led_off = 0;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <fsm+0x2c0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\na : Speed Up +1Hz\r\ns : Speed Down -1Hz\r\nd : On/Off\r\nx : Back\r\nLED Turned On!\r", 108);
 8000ef2:	226c      	movs	r2, #108	; 0x6c
 8000ef4:	4923      	ldr	r1, [pc, #140]	; (8000f84 <fsm+0x2c8>)
 8000ef6:	4816      	ldr	r0, [pc, #88]	; (8000f50 <fsm+0x294>)
 8000ef8:	f001 fae7 	bl	80024ca <HAL_UART_Transmit_IT>
			if(led_off == 0){
 8000efc:	e020      	b.n	8000f40 <fsm+0x284>
		else if(action == 0 && rx_buf[0] != 'x' && rx_buf[0] != 'a' && rx_buf[0] != 's' && rx_buf[0] != 'd'){
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <fsm+0x298>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 8090 	bne.w	8001028 <fsm+0x36c>
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <fsm+0x29c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b78      	cmp	r3, #120	; 0x78
 8000f0e:	f000 808b 	beq.w	8001028 <fsm+0x36c>
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <fsm+0x29c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b61      	cmp	r3, #97	; 0x61
 8000f18:	f000 8086 	beq.w	8001028 <fsm+0x36c>
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <fsm+0x29c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b73      	cmp	r3, #115	; 0x73
 8000f22:	f000 8081 	beq.w	8001028 <fsm+0x36c>
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <fsm+0x29c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d07c      	beq.n	8001028 <fsm+0x36c>
			action = 1;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <fsm+0x298>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"Wrong Button Pressed!\r\n", 23);
 8000f34:	2217      	movs	r2, #23
 8000f36:	490b      	ldr	r1, [pc, #44]	; (8000f64 <fsm+0x2a8>)
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <fsm+0x294>)
 8000f3a:	f001 fac6 	bl	80024ca <HAL_UART_Transmit_IT>
		break;
 8000f3e:	e073      	b.n	8001028 <fsm+0x36c>
			if(led_off == 0){
 8000f40:	bf00      	nop
		break;
 8000f42:	e071      	b.n	8001028 <fsm+0x36c>
 8000f44:	200000d9 	.word	0x200000d9
 8000f48:	200000dc 	.word	0x200000dc
 8000f4c:	08003e78 	.word	0x08003e78
 8000f50:	20000094 	.word	0x20000094
 8000f54:	20000004 	.word	0x20000004
 8000f58:	200000d8 	.word	0x200000d8
 8000f5c:	08003ebc 	.word	0x08003ebc
 8000f60:	08003f1c 	.word	0x08003f1c
 8000f64:	08003f48 	.word	0x08003f48
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	43fa0000 	.word	0x43fa0000
 8000f70:	20000005 	.word	0x20000005
 8000f74:	08003e08 	.word	0x08003e08
 8000f78:	200000e0 	.word	0x200000e0
 8000f7c:	200000da 	.word	0x200000da
 8000f80:	08003f60 	.word	0x08003f60
 8000f84:	08003fd0 	.word	0x08003fd0
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <fsm+0x378>)
 8000f8e:	f000 fd6b 	bl	8001a68 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <fsm+0x37c>)
 8000f98:	701a      	strb	r2, [r3, #0]
		if(HAL_GetTick()>=timestamp2){
 8000f9a:	f000 fa31 	bl	8001400 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <fsm+0x380>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d318      	bcc.n	8000fda <fsm+0x31e>
			timestamp2 = HAL_GetTick()+250;
 8000fa8:	f000 fa2a 	bl	8001400 <HAL_GetTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	33fa      	adds	r3, #250	; 0xfa
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <fsm+0x380>)
 8000fb2:	6013      	str	r3, [r2, #0]
			if(button_state == 0){
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <fsm+0x37c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <fsm+0x30c>
				HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rButton Status : Pressed\r\n\nAvailable Options\r\nx : Back\r\n\r", 67);
 8000fbc:	2243      	movs	r2, #67	; 0x43
 8000fbe:	4920      	ldr	r1, [pc, #128]	; (8001040 <fsm+0x384>)
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <fsm+0x388>)
 8000fc2:	f001 fa82 	bl	80024ca <HAL_UART_Transmit_IT>
 8000fc6:	e008      	b.n	8000fda <fsm+0x31e>
			else if(button_state == 1){
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <fsm+0x37c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d104      	bne.n	8000fda <fsm+0x31e>
				HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rButton Status : Not Pressed\r\n\nAvailable Options\r\nx : Back\r\n\r", 71);
 8000fd0:	2247      	movs	r2, #71	; 0x47
 8000fd2:	491d      	ldr	r1, [pc, #116]	; (8001048 <fsm+0x38c>)
 8000fd4:	481b      	ldr	r0, [pc, #108]	; (8001044 <fsm+0x388>)
 8000fd6:	f001 fa78 	bl	80024ca <HAL_UART_Transmit_IT>
		if(action == 0 && rx_buf[0] == 'x'){
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <fsm+0x390>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10f      	bne.n	8001002 <fsm+0x346>
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <fsm+0x394>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b78      	cmp	r3, #120	; 0x78
 8000fe8:	d10b      	bne.n	8001002 <fsm+0x346>
			action = 1;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <fsm+0x390>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <fsm+0x398>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"\n\n\n\n\n\n\n\n\n\n\rAvailable Options\r\n0 : LED Control\r\n1 : Button Status\r\n", 66);
 8000ff6:	2242      	movs	r2, #66	; 0x42
 8000ff8:	4917      	ldr	r1, [pc, #92]	; (8001058 <fsm+0x39c>)
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <fsm+0x388>)
 8000ffc:	f001 fa65 	bl	80024ca <HAL_UART_Transmit_IT>
		break;
 8001000:	e014      	b.n	800102c <fsm+0x370>
		else if(action == 0 && rx_buf[0] != 'x'){
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <fsm+0x390>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d110      	bne.n	800102c <fsm+0x370>
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <fsm+0x394>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b78      	cmp	r3, #120	; 0x78
 8001010:	d00c      	beq.n	800102c <fsm+0x370>
			action = 1;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <fsm+0x390>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,"Wrong Button Pressed!\r\n", 23);
 8001018:	2217      	movs	r2, #23
 800101a:	4910      	ldr	r1, [pc, #64]	; (800105c <fsm+0x3a0>)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <fsm+0x388>)
 800101e:	f001 fa54 	bl	80024ca <HAL_UART_Transmit_IT>
		break;
 8001022:	e003      	b.n	800102c <fsm+0x370>
		break;
 8001024:	bf00      	nop
 8001026:	e002      	b.n	800102e <fsm+0x372>
		break;
 8001028:	bf00      	nop
 800102a:	e000      	b.n	800102e <fsm+0x372>
		break;
 800102c:	bf00      	nop
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020800 	.word	0x40020800
 8001038:	200000db 	.word	0x200000db
 800103c:	20000150 	.word	0x20000150
 8001040:	0800403c 	.word	0x0800403c
 8001044:	20000094 	.word	0x20000094
 8001048:	08004080 	.word	0x08004080
 800104c:	20000004 	.word	0x20000004
 8001050:	200000d8 	.word	0x200000d8
 8001054:	200000d9 	.word	0x200000d9
 8001058:	08003e78 	.word	0x08003e78
 800105c:	08003f48 	.word	0x08003f48

08001060 <led>:

void led(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(led_spd > 60000){
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <led+0x74>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80010d8 <led+0x78>
 800106e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	dd02      	ble.n	800107e <led+0x1e>
		led_spd = 1000;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <led+0x74>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <led+0x7c>)
 800107c:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GetTick()>=timestamp && led_off == 0){
 800107e:	f000 f9bf 	bl	8001400 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <led+0x80>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d318      	bcc.n	80010be <led+0x5e>
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <led+0x84>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d114      	bne.n	80010be <led+0x5e>
		timestamp = HAL_GetTick()+led_spd;
 8001094:	f000 f9b4 	bl	8001400 <HAL_GetTick>
 8001098:	ee07 0a90 	vmov	s15, r0
 800109c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <led+0x74>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	ee17 2a90 	vmov	r2, s15
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <led+0x80>)
 80010b4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010b6:	2120      	movs	r1, #32
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <led+0x88>)
 80010ba:	f000 fd06 	bl	8001aca <HAL_GPIO_TogglePin>
	}
	if(led_off == 1){
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <led+0x84>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d104      	bne.n	80010d0 <led+0x70>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <led+0x88>)
 80010cc:	f000 fce4 	bl	8001a98 <HAL_GPIO_WritePin>

	}
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	476a6000 	.word	0x476a6000
 80010dc:	447a0000 	.word	0x447a0000
 80010e0:	20000154 	.word	0x20000154
 80010e4:	200000da 	.word	0x200000da
 80010e8:	40020000 	.word	0x40020000

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001136:	2007      	movs	r0, #7
 8001138:	f000 fa3e 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <HAL_UART_MspInit+0x94>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d133      	bne.n	80011d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0x98>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_UART_MspInit+0x98>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0x98>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_UART_MspInit+0x98>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_UART_MspInit+0x98>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_UART_MspInit+0x98>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011a2:	230c      	movs	r3, #12
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <HAL_UART_MspInit+0x9c>)
 80011be:	f000 facf 	bl	8001760 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2026      	movs	r0, #38	; 0x26
 80011c8:	f000 fa01 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011cc:	2026      	movs	r0, #38	; 0x26
 80011ce:	f000 fa1a 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f8d0 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <USART2_IRQHandler+0x10>)
 8001242:	f001 f9b7 	bl	80025b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000094 	.word	0x20000094

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f002 f892 	bl	80033a8 <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20020000 	.word	0x20020000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	20000158 	.word	0x20000158
 80012b8:	20000170 	.word	0x20000170

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130a:	f7ff ffd7 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f002 f851 	bl	80033b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fb9b 	bl	8000a4c <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001324:	08004124 	.word	0x08004124
  ldr r2, =_sbss
 8001328:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800132c:	20000170 	.word	0x20000170

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f92b 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fec6 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f943 	bl	8001622 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f90b 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000010 	.word	0x20000010
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	2000015c 	.word	0x2000015c

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000015c 	.word	0x2000015c

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff3e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff31 	bl	800147c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff feda 	bl	8001400 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d008      	beq.n	800166c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e052      	b.n	8001712 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0216 	bic.w	r2, r2, #22
 800167a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_DMA_Abort+0x62>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016bc:	e013      	b.n	80016e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016be:	f7ff fe9f 	bl	8001400 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d90c      	bls.n	80016e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e015      	b.n	8001712 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e4      	bne.n	80016be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d004      	beq.n	8001738 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e00c      	b.n	8001752 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e159      	b.n	8001a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8148 	bne.w	8001a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a2 	beq.w	8001a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a56      	ldr	r2, [pc, #344]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x202>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_GPIO_Init+0x2f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1fe>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <HAL_GPIO_Init+0x2f8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1fa>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a46      	ldr	r2, [pc, #280]	; (8001a5c <HAL_GPIO_Init+0x2fc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1f6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <HAL_GPIO_Init+0x300>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1f2>
 800194e:	2304      	movs	r3, #4
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001952:	2307      	movs	r3, #7
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001974:	4935      	ldr	r1, [pc, #212]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a6:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f aea2 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e267      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e242      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6c      	ldr	r2, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fc22 	bl	8001400 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc1e 	bl	8001400 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e207      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc0e 	bl	8001400 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc0a 	bl	8001400 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1f3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fbc3 	bl	8001400 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fbbf 	bl	8001400 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4925      	ldr	r1, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fba2 	bl	8001400 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb9e 	bl	8001400 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e187      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fb82 	bl	8001400 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fb7e 	bl	8001400 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e167      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb6b 	bl	8001400 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e00e      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fb67 	bl	8001400 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d907      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e150      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470000 	.word	0x42470000
 8001d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ea      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8097 	beq.w	8001e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fb27 	bl	8001400 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff fb23 	bl	8001400 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e10c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x2ea>
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x30c>
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d015      	beq.n	8001e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fae8 	bl	8001400 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff fae4 	bl	8001400 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0cb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ee      	beq.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fad2 	bl	8001400 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff face 	bl	8001400 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0b5      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ee      	bne.n	8001e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d05c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d141      	bne.n	8001f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff faa2 	bl	8001400 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fa9e 	bl	8001400 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e087      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fa77 	bl	8001400 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fa73 	bl	8001400 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e05c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x416>
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fa60 	bl	8001400 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fa5c 	bl	8001400 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d028      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d121      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7ff f98e 	bl	8001400 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff f98a 	bl	8001400 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f8ee 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	080040c8 	.word	0x080040c8
 80021b4:	20000008 	.word	0x20000008
 80021b8:	2000000c 	.word	0x2000000c

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b094      	sub	sp, #80	; 0x50
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
 80021c8:	2300      	movs	r3, #0
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80e1 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e0db      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021f4:	e0db      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fa:	e0d8      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
 800221c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
 800222a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	6139      	str	r1, [r7, #16]
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002260:	4659      	mov	r1, fp
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4651      	mov	r1, sl
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4651      	mov	r1, sl
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4651      	mov	r1, sl
 8002270:	ebb2 0801 	subs.w	r8, r2, r1
 8002274:	4659      	mov	r1, fp
 8002276:	eb63 0901 	sbc.w	r9, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228e:	4690      	mov	r8, r2
 8002290:	4699      	mov	r9, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb18 0303 	adds.w	r3, r8, r3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	462b      	mov	r3, r5
 800229c:	eb49 0303 	adc.w	r3, r9, r3
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ae:	4629      	mov	r1, r5
 80022b0:	024b      	lsls	r3, r1, #9
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b8:	4621      	mov	r1, r4
 80022ba:	024a      	lsls	r2, r1, #9
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	2200      	movs	r2, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022cc:	f7fe fa3c 	bl	8000748 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d8:	e058      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	2200      	movs	r2, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	4611      	mov	r1, r2
 80022e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002306:	0150      	lsls	r0, r2, #5
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4641      	mov	r1, r8
 800230e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb63 0b01 	sbc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800232c:	ebb2 040a 	subs.w	r4, r2, sl
 8002330:	eb63 050b 	sbc.w	r5, r3, fp
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	2200      	movs	r2, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002380:	f7fe f9e2 	bl	8000748 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800239c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3750      	adds	r7, #80	; 0x50
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000008 	.word	0x20000008

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	080040d8 	.word	0x080040d8

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffdc 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	080040d8 	.word	0x080040d8

08002430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e03f      	b.n	80024c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fe76 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fd23 	bl	8002ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d130      	bne.n	8002546 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Transmit_IT+0x26>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e029      	b.n	8002548 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Transmit_IT+0x38>
 80024fe:	2302      	movs	r3, #2
 8002500:	e022      	b.n	8002548 <HAL_UART_Transmit_IT+0x7e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2221      	movs	r2, #33	; 0x21
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002540:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	d11d      	bne.n	80025aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_UART_Receive_IT+0x26>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_UART_Receive_IT+0x38>
 8002588:	2302      	movs	r3, #2
 800258a:	e00f      	b.n	80025ac <HAL_UART_Receive_IT+0x58>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	461a      	mov	r2, r3
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fab5 	bl	8002b10 <UART_Start_Receive_IT>
 80025a6:	4603      	mov	r3, r0
 80025a8:	e000      	b.n	80025ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0ba      	sub	sp, #232	; 0xe8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_UART_IRQHandler+0x66>
 8002606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fb99 	bl	8002d4a <UART_Receive_IT>
      return;
 8002618:	e256      	b.n	8002ac8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800261a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80de 	beq.w	80027e0 <HAL_UART_IRQHandler+0x22c>
 8002624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80d1 	beq.w	80027e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800263e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_UART_IRQHandler+0xae>
 800264a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_UART_IRQHandler+0xd2>
 800266e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_UART_IRQHandler+0xf6>
 8002692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d011      	beq.n	80026da <HAL_UART_IRQHandler+0x126>
 80026b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0208 	orr.w	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 81ed 	beq.w	8002abe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_UART_IRQHandler+0x14e>
 80026f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fb24 	bl	8002d4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_UART_IRQHandler+0x17a>
 8002726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04f      	beq.n	80027ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa2c 	bl	8002b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d141      	bne.n	80027c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3314      	adds	r3, #20
 8002748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800275c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3314      	adds	r3, #20
 800276a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800276e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800277a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1d9      	bne.n	8002742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d013      	beq.n	80027be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <HAL_UART_IRQHandler+0x3dc>)
 800279c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe ffb9 	bl	800171a <HAL_DMA_Abort_IT>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b8:	4610      	mov	r0, r2
 80027ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	e00e      	b.n	80027dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f990 	bl	8002ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	e00a      	b.n	80027dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f98c 	bl	8002ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	e006      	b.n	80027dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f988 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027da:	e170      	b.n	8002abe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	bf00      	nop
    return;
 80027de:	e16e      	b.n	8002abe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	f040 814a 	bne.w	8002a7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8143 	beq.w	8002a7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 813c 	beq.w	8002a7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	f040 80b4 	bne.w	8002994 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8140 	beq.w	8002ac2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800284a:	429a      	cmp	r2, r3
 800284c:	f080 8139 	bcs.w	8002ac2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002856:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002862:	f000 8088 	beq.w	8002976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800287c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800289e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1d9      	bne.n	8002866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3314      	adds	r3, #20
 80028b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3314      	adds	r3, #20
 80028d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e1      	bne.n	80028b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e3      	bne.n	80028ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293e:	e853 3f00 	ldrex	r3, [r3]
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002946:	f023 0310 	bic.w	r3, r3, #16
 800294a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002958:	65ba      	str	r2, [r7, #88]	; 0x58
 800295a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800295e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002960:	e841 2300 	strex	r3, r2, [r1]
 8002964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e3      	bne.n	8002934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fe62 	bl	800163a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800297e:	b29b      	uxth	r3, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8b6 	bl	8002af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800298c:	e099      	b.n	8002ac2 <HAL_UART_IRQHandler+0x50e>
 800298e:	bf00      	nop
 8002990:	08002c53 	.word	0x08002c53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299c:	b29b      	uxth	r3, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 808b 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8086 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029de:	647a      	str	r2, [r7, #68]	; 0x44
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e3      	bne.n	80029ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	623b      	str	r3, [r7, #32]
   return(result);
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a16:	633a      	str	r2, [r7, #48]	; 0x30
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e3      	bne.n	80029f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	e853 3f00 	ldrex	r3, [r3]
 8002a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0310 	bic.w	r3, r3, #16
 8002a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a5c:	61fa      	str	r2, [r7, #28]
 8002a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	69b9      	ldr	r1, [r7, #24]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	617b      	str	r3, [r7, #20]
   return(result);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e3      	bne.n	8002a38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f83e 	bl	8002af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a7c:	e023      	b.n	8002ac6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_UART_IRQHandler+0x4ea>
 8002a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8ef 	bl	8002c7a <UART_Transmit_IT>
    return;
 8002a9c:	e014      	b.n	8002ac8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x514>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f92f 	bl	8002d1a <UART_EndTransmit_IT>
    return;
 8002abc:	e004      	b.n	8002ac8 <HAL_UART_IRQHandler+0x514>
    return;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ac6:	bf00      	nop
  }
}
 8002ac8:	37e8      	adds	r7, #232	; 0xe8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop

08002ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2222      	movs	r2, #34	; 0x22
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b095      	sub	sp, #84	; 0x54
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	e853 3f00 	ldrex	r3, [r3]
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb4:	643a      	str	r2, [r7, #64]	; 0x40
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bbc:	e841 2300 	strex	r3, r2, [r1]
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e5      	bne.n	8002b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e5      	bne.n	8002bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d119      	bne.n	8002c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f023 0310 	bic.w	r3, r3, #16
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c24:	61ba      	str	r2, [r7, #24]
 8002c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	613b      	str	r3, [r7, #16]
   return(result);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c46:	bf00      	nop
 8002c48:	3754      	adds	r7, #84	; 0x54
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ff39 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d13e      	bne.n	8002d0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	d114      	bne.n	8002cc2 <UART_Transmit_IT+0x48>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	621a      	str	r2, [r3, #32]
 8002cc0:	e008      	b.n	8002cd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6211      	str	r1, [r2, #32]
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fec8 	bl	8002ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08c      	sub	sp, #48	; 0x30
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b22      	cmp	r3, #34	; 0x22
 8002d5c:	f040 80ab 	bne.w	8002eb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d68:	d117      	bne.n	8002d9a <UART_Receive_IT+0x50>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	1c9a      	adds	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
 8002d98:	e026      	b.n	8002de8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d007      	beq.n	8002dbe <UART_Receive_IT+0x74>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <UART_Receive_IT+0x82>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e008      	b.n	8002dde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d15a      	bne.n	8002eb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0220 	bic.w	r2, r2, #32
 8002e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d135      	bne.n	8002ea8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	613b      	str	r3, [r7, #16]
   return(result);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f023 0310 	bic.w	r3, r3, #16
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	623a      	str	r2, [r7, #32]
 8002e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	69f9      	ldr	r1, [r7, #28]
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e5      	bne.n	8002e42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d10a      	bne.n	8002e9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe29 	bl	8002af8 <HAL_UARTEx_RxEventCallback>
 8002ea6:	e002      	b.n	8002eae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fef7 	bl	8000c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e002      	b.n	8002eb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3730      	adds	r7, #48	; 0x30
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b0c0      	sub	sp, #256	; 0x100
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	ea40 0301 	orr.w	r3, r0, r1
 8002ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f18:	f021 010c 	bic.w	r1, r1, #12
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f26:	430b      	orrs	r3, r1
 8002f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	6999      	ldr	r1, [r3, #24]
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	ea40 0301 	orr.w	r3, r0, r1
 8002f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b8f      	ldr	r3, [pc, #572]	; (800318c <UART_SetConfig+0x2cc>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d005      	beq.n	8002f60 <UART_SetConfig+0xa0>
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <UART_SetConfig+0x2d0>)
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d104      	bne.n	8002f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff fa52 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8002f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f68:	e003      	b.n	8002f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f6a:	f7ff fa39 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8002f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	f040 810c 	bne.w	8003198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	1891      	adds	r1, r2, r2
 8002f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	eb12 0801 	adds.w	r8, r2, r1
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb43 0901 	adc.w	r9, r3, r1
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc2:	4690      	mov	r8, r2
 8002fc4:	4699      	mov	r9, r3
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	eb18 0303 	adds.w	r3, r8, r3
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	eb49 0303 	adc.w	r3, r9, r3
 8002fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fee:	460b      	mov	r3, r1
 8002ff0:	18db      	adds	r3, r3, r3
 8002ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	eb42 0303 	adc.w	r3, r2, r3
 8002ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8002ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003004:	f7fd fba0 	bl	8000748 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <UART_SetConfig+0x2d4>)
 800300e:	fba3 2302 	umull	r2, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	011c      	lsls	r4, r3, #4
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003028:	4642      	mov	r2, r8
 800302a:	464b      	mov	r3, r9
 800302c:	1891      	adds	r1, r2, r2
 800302e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003030:	415b      	adcs	r3, r3
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003038:	4641      	mov	r1, r8
 800303a:	eb12 0a01 	adds.w	sl, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb43 0b01 	adc.w	fp, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003058:	4692      	mov	sl, r2
 800305a:	469b      	mov	fp, r3
 800305c:	4643      	mov	r3, r8
 800305e:	eb1a 0303 	adds.w	r3, sl, r3
 8003062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003066:	464b      	mov	r3, r9
 8003068:	eb4b 0303 	adc.w	r3, fp, r3
 800306c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800307c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003084:	460b      	mov	r3, r1
 8003086:	18db      	adds	r3, r3, r3
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
 800308a:	4613      	mov	r3, r2
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	647b      	str	r3, [r7, #68]	; 0x44
 8003092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800309a:	f7fd fb55 	bl	8000748 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <UART_SetConfig+0x2d4>)
 80030a6:	fba3 2301 	umull	r2, r3, r3, r1
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	1acb      	subs	r3, r1, r3
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <UART_SetConfig+0x2d4>)
 80030bc:	fba3 2302 	umull	r2, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c8:	441c      	add	r4, r3
 80030ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030e4:	415b      	adcs	r3, r3
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ec:	4641      	mov	r1, r8
 80030ee:	1851      	adds	r1, r2, r1
 80030f0:	6339      	str	r1, [r7, #48]	; 0x30
 80030f2:	4649      	mov	r1, r9
 80030f4:	414b      	adcs	r3, r1
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003104:	4659      	mov	r1, fp
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4651      	mov	r1, sl
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4642      	mov	r2, r8
 800311a:	189b      	adds	r3, r3, r2
 800311c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003120:	464b      	mov	r3, r9
 8003122:	460a      	mov	r2, r1
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800313c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003140:	460b      	mov	r3, r1
 8003142:	18db      	adds	r3, r3, r3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
 8003146:	4613      	mov	r3, r2
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003156:	f7fd faf7 	bl	8000748 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <UART_SetConfig+0x2d4>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <UART_SetConfig+0x2d4>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4422      	add	r2, r4
 8003186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003188:	e105      	b.n	8003396 <UART_SetConfig+0x4d6>
 800318a:	bf00      	nop
 800318c:	40011000 	.word	0x40011000
 8003190:	40011400 	.word	0x40011400
 8003194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	6239      	str	r1, [r7, #32]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ba:	4641      	mov	r1, r8
 80031bc:	1854      	adds	r4, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb43 0501 	adc.w	r5, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031e0:	464b      	mov	r3, r9
 80031e2:	eb45 0303 	adc.w	r3, r5, r3
 80031e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003206:	4629      	mov	r1, r5
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003210:	4621      	mov	r1, r4
 8003212:	008a      	lsls	r2, r1, #2
 8003214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003218:	f7fd fa96 	bl	8000748 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <UART_SetConfig+0x4e4>)
 8003222:	fba3 2302 	umull	r2, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	011c      	lsls	r4, r3, #4
 800322a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	61b9      	str	r1, [r7, #24]
 8003244:	415b      	adcs	r3, r3
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	4641      	mov	r1, r8
 800324e:	1851      	adds	r1, r2, r1
 8003250:	6139      	str	r1, [r7, #16]
 8003252:	4649      	mov	r1, r9
 8003254:	414b      	adcs	r3, r1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003264:	4659      	mov	r1, fp
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326e:	4651      	mov	r1, sl
 8003270:	00ca      	lsls	r2, r1, #3
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	4603      	mov	r3, r0
 8003278:	4642      	mov	r2, r8
 800327a:	189b      	adds	r3, r3, r2
 800327c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003280:	464b      	mov	r3, r9
 8003282:	460a      	mov	r2, r1
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	67bb      	str	r3, [r7, #120]	; 0x78
 8003296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032a4:	4649      	mov	r1, r9
 80032a6:	008b      	lsls	r3, r1, #2
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ae:	4641      	mov	r1, r8
 80032b0:	008a      	lsls	r2, r1, #2
 80032b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032b6:	f7fd fa47 	bl	8000748 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <UART_SetConfig+0x4e4>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2164      	movs	r1, #100	; 0x64
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <UART_SetConfig+0x4e4>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	441c      	add	r4, r3
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e4:	2200      	movs	r2, #0
 80032e6:	673b      	str	r3, [r7, #112]	; 0x70
 80032e8:	677a      	str	r2, [r7, #116]	; 0x74
 80032ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ee:	4642      	mov	r2, r8
 80032f0:	464b      	mov	r3, r9
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	415b      	adcs	r3, r3
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032fe:	4641      	mov	r1, r8
 8003300:	1851      	adds	r1, r2, r1
 8003302:	6039      	str	r1, [r7, #0]
 8003304:	4649      	mov	r1, r9
 8003306:	414b      	adcs	r3, r1
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003316:	4659      	mov	r1, fp
 8003318:	00cb      	lsls	r3, r1, #3
 800331a:	4651      	mov	r1, sl
 800331c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003320:	4651      	mov	r1, sl
 8003322:	00ca      	lsls	r2, r1, #3
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	4603      	mov	r3, r0
 800332a:	4642      	mov	r2, r8
 800332c:	189b      	adds	r3, r3, r2
 800332e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003330:	464b      	mov	r3, r9
 8003332:	460a      	mov	r2, r1
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	663b      	str	r3, [r7, #96]	; 0x60
 8003344:	667a      	str	r2, [r7, #100]	; 0x64
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003352:	4649      	mov	r1, r9
 8003354:	008b      	lsls	r3, r1, #2
 8003356:	4641      	mov	r1, r8
 8003358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800335c:	4641      	mov	r1, r8
 800335e:	008a      	lsls	r2, r1, #2
 8003360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003364:	f7fd f9f0 	bl	8000748 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <UART_SetConfig+0x4e4>)
 800336e:	fba3 1302 	umull	r1, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2164      	movs	r1, #100	; 0x64
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <UART_SetConfig+0x4e4>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4422      	add	r2, r4
 8003394:	609a      	str	r2, [r3, #8]
}
 8003396:	bf00      	nop
 8003398:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	51eb851f 	.word	0x51eb851f

080033a8 <__errno>:
 80033a8:	4b01      	ldr	r3, [pc, #4]	; (80033b0 <__errno+0x8>)
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000014 	.word	0x20000014

080033b4 <__libc_init_array>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4d0d      	ldr	r5, [pc, #52]	; (80033ec <__libc_init_array+0x38>)
 80033b8:	4c0d      	ldr	r4, [pc, #52]	; (80033f0 <__libc_init_array+0x3c>)
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	10a4      	asrs	r4, r4, #2
 80033be:	2600      	movs	r6, #0
 80033c0:	42a6      	cmp	r6, r4
 80033c2:	d109      	bne.n	80033d8 <__libc_init_array+0x24>
 80033c4:	4d0b      	ldr	r5, [pc, #44]	; (80033f4 <__libc_init_array+0x40>)
 80033c6:	4c0c      	ldr	r4, [pc, #48]	; (80033f8 <__libc_init_array+0x44>)
 80033c8:	f000 fd12 	bl	8003df0 <_init>
 80033cc:	1b64      	subs	r4, r4, r5
 80033ce:	10a4      	asrs	r4, r4, #2
 80033d0:	2600      	movs	r6, #0
 80033d2:	42a6      	cmp	r6, r4
 80033d4:	d105      	bne.n	80033e2 <__libc_init_array+0x2e>
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033dc:	4798      	blx	r3
 80033de:	3601      	adds	r6, #1
 80033e0:	e7ee      	b.n	80033c0 <__libc_init_array+0xc>
 80033e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e6:	4798      	blx	r3
 80033e8:	3601      	adds	r6, #1
 80033ea:	e7f2      	b.n	80033d2 <__libc_init_array+0x1e>
 80033ec:	0800411c 	.word	0x0800411c
 80033f0:	0800411c 	.word	0x0800411c
 80033f4:	0800411c 	.word	0x0800411c
 80033f8:	08004120 	.word	0x08004120

080033fc <memset>:
 80033fc:	4402      	add	r2, r0
 80033fe:	4603      	mov	r3, r0
 8003400:	4293      	cmp	r3, r2
 8003402:	d100      	bne.n	8003406 <memset+0xa>
 8003404:	4770      	bx	lr
 8003406:	f803 1b01 	strb.w	r1, [r3], #1
 800340a:	e7f9      	b.n	8003400 <memset+0x4>

0800340c <siprintf>:
 800340c:	b40e      	push	{r1, r2, r3}
 800340e:	b500      	push	{lr}
 8003410:	b09c      	sub	sp, #112	; 0x70
 8003412:	ab1d      	add	r3, sp, #116	; 0x74
 8003414:	9002      	str	r0, [sp, #8]
 8003416:	9006      	str	r0, [sp, #24]
 8003418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800341c:	4809      	ldr	r0, [pc, #36]	; (8003444 <siprintf+0x38>)
 800341e:	9107      	str	r1, [sp, #28]
 8003420:	9104      	str	r1, [sp, #16]
 8003422:	4909      	ldr	r1, [pc, #36]	; (8003448 <siprintf+0x3c>)
 8003424:	f853 2b04 	ldr.w	r2, [r3], #4
 8003428:	9105      	str	r1, [sp, #20]
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	a902      	add	r1, sp, #8
 8003430:	f000 f868 	bl	8003504 <_svfiprintf_r>
 8003434:	9b02      	ldr	r3, [sp, #8]
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	b01c      	add	sp, #112	; 0x70
 800343c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003440:	b003      	add	sp, #12
 8003442:	4770      	bx	lr
 8003444:	20000014 	.word	0x20000014
 8003448:	ffff0208 	.word	0xffff0208

0800344c <__ssputs_r>:
 800344c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003450:	688e      	ldr	r6, [r1, #8]
 8003452:	429e      	cmp	r6, r3
 8003454:	4682      	mov	sl, r0
 8003456:	460c      	mov	r4, r1
 8003458:	4690      	mov	r8, r2
 800345a:	461f      	mov	r7, r3
 800345c:	d838      	bhi.n	80034d0 <__ssputs_r+0x84>
 800345e:	898a      	ldrh	r2, [r1, #12]
 8003460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003464:	d032      	beq.n	80034cc <__ssputs_r+0x80>
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	6909      	ldr	r1, [r1, #16]
 800346a:	eba5 0901 	sub.w	r9, r5, r1
 800346e:	6965      	ldr	r5, [r4, #20]
 8003470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003478:	3301      	adds	r3, #1
 800347a:	444b      	add	r3, r9
 800347c:	106d      	asrs	r5, r5, #1
 800347e:	429d      	cmp	r5, r3
 8003480:	bf38      	it	cc
 8003482:	461d      	movcc	r5, r3
 8003484:	0553      	lsls	r3, r2, #21
 8003486:	d531      	bpl.n	80034ec <__ssputs_r+0xa0>
 8003488:	4629      	mov	r1, r5
 800348a:	f000 fb63 	bl	8003b54 <_malloc_r>
 800348e:	4606      	mov	r6, r0
 8003490:	b950      	cbnz	r0, 80034a8 <__ssputs_r+0x5c>
 8003492:	230c      	movs	r3, #12
 8003494:	f8ca 3000 	str.w	r3, [sl]
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349e:	81a3      	strh	r3, [r4, #12]
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a8:	6921      	ldr	r1, [r4, #16]
 80034aa:	464a      	mov	r2, r9
 80034ac:	f000 fabe 	bl	8003a2c <memcpy>
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	81a3      	strh	r3, [r4, #12]
 80034bc:	6126      	str	r6, [r4, #16]
 80034be:	6165      	str	r5, [r4, #20]
 80034c0:	444e      	add	r6, r9
 80034c2:	eba5 0509 	sub.w	r5, r5, r9
 80034c6:	6026      	str	r6, [r4, #0]
 80034c8:	60a5      	str	r5, [r4, #8]
 80034ca:	463e      	mov	r6, r7
 80034cc:	42be      	cmp	r6, r7
 80034ce:	d900      	bls.n	80034d2 <__ssputs_r+0x86>
 80034d0:	463e      	mov	r6, r7
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	4632      	mov	r2, r6
 80034d6:	4641      	mov	r1, r8
 80034d8:	f000 fab6 	bl	8003a48 <memmove>
 80034dc:	68a3      	ldr	r3, [r4, #8]
 80034de:	1b9b      	subs	r3, r3, r6
 80034e0:	60a3      	str	r3, [r4, #8]
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	4433      	add	r3, r6
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7db      	b.n	80034a4 <__ssputs_r+0x58>
 80034ec:	462a      	mov	r2, r5
 80034ee:	f000 fba5 	bl	8003c3c <_realloc_r>
 80034f2:	4606      	mov	r6, r0
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d1e1      	bne.n	80034bc <__ssputs_r+0x70>
 80034f8:	6921      	ldr	r1, [r4, #16]
 80034fa:	4650      	mov	r0, sl
 80034fc:	f000 fabe 	bl	8003a7c <_free_r>
 8003500:	e7c7      	b.n	8003492 <__ssputs_r+0x46>
	...

08003504 <_svfiprintf_r>:
 8003504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003508:	4698      	mov	r8, r3
 800350a:	898b      	ldrh	r3, [r1, #12]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	b09d      	sub	sp, #116	; 0x74
 8003510:	4607      	mov	r7, r0
 8003512:	460d      	mov	r5, r1
 8003514:	4614      	mov	r4, r2
 8003516:	d50e      	bpl.n	8003536 <_svfiprintf_r+0x32>
 8003518:	690b      	ldr	r3, [r1, #16]
 800351a:	b963      	cbnz	r3, 8003536 <_svfiprintf_r+0x32>
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	f000 fb19 	bl	8003b54 <_malloc_r>
 8003522:	6028      	str	r0, [r5, #0]
 8003524:	6128      	str	r0, [r5, #16]
 8003526:	b920      	cbnz	r0, 8003532 <_svfiprintf_r+0x2e>
 8003528:	230c      	movs	r3, #12
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e0d1      	b.n	80036d6 <_svfiprintf_r+0x1d2>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	616b      	str	r3, [r5, #20]
 8003536:	2300      	movs	r3, #0
 8003538:	9309      	str	r3, [sp, #36]	; 0x24
 800353a:	2320      	movs	r3, #32
 800353c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003540:	f8cd 800c 	str.w	r8, [sp, #12]
 8003544:	2330      	movs	r3, #48	; 0x30
 8003546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80036f0 <_svfiprintf_r+0x1ec>
 800354a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800354e:	f04f 0901 	mov.w	r9, #1
 8003552:	4623      	mov	r3, r4
 8003554:	469a      	mov	sl, r3
 8003556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800355a:	b10a      	cbz	r2, 8003560 <_svfiprintf_r+0x5c>
 800355c:	2a25      	cmp	r2, #37	; 0x25
 800355e:	d1f9      	bne.n	8003554 <_svfiprintf_r+0x50>
 8003560:	ebba 0b04 	subs.w	fp, sl, r4
 8003564:	d00b      	beq.n	800357e <_svfiprintf_r+0x7a>
 8003566:	465b      	mov	r3, fp
 8003568:	4622      	mov	r2, r4
 800356a:	4629      	mov	r1, r5
 800356c:	4638      	mov	r0, r7
 800356e:	f7ff ff6d 	bl	800344c <__ssputs_r>
 8003572:	3001      	adds	r0, #1
 8003574:	f000 80aa 	beq.w	80036cc <_svfiprintf_r+0x1c8>
 8003578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800357a:	445a      	add	r2, fp
 800357c:	9209      	str	r2, [sp, #36]	; 0x24
 800357e:	f89a 3000 	ldrb.w	r3, [sl]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80a2 	beq.w	80036cc <_svfiprintf_r+0x1c8>
 8003588:	2300      	movs	r3, #0
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003592:	f10a 0a01 	add.w	sl, sl, #1
 8003596:	9304      	str	r3, [sp, #16]
 8003598:	9307      	str	r3, [sp, #28]
 800359a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800359e:	931a      	str	r3, [sp, #104]	; 0x68
 80035a0:	4654      	mov	r4, sl
 80035a2:	2205      	movs	r2, #5
 80035a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a8:	4851      	ldr	r0, [pc, #324]	; (80036f0 <_svfiprintf_r+0x1ec>)
 80035aa:	f7fc fe19 	bl	80001e0 <memchr>
 80035ae:	9a04      	ldr	r2, [sp, #16]
 80035b0:	b9d8      	cbnz	r0, 80035ea <_svfiprintf_r+0xe6>
 80035b2:	06d0      	lsls	r0, r2, #27
 80035b4:	bf44      	itt	mi
 80035b6:	2320      	movmi	r3, #32
 80035b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035bc:	0711      	lsls	r1, r2, #28
 80035be:	bf44      	itt	mi
 80035c0:	232b      	movmi	r3, #43	; 0x2b
 80035c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035c6:	f89a 3000 	ldrb.w	r3, [sl]
 80035ca:	2b2a      	cmp	r3, #42	; 0x2a
 80035cc:	d015      	beq.n	80035fa <_svfiprintf_r+0xf6>
 80035ce:	9a07      	ldr	r2, [sp, #28]
 80035d0:	4654      	mov	r4, sl
 80035d2:	2000      	movs	r0, #0
 80035d4:	f04f 0c0a 	mov.w	ip, #10
 80035d8:	4621      	mov	r1, r4
 80035da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035de:	3b30      	subs	r3, #48	; 0x30
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d94e      	bls.n	8003682 <_svfiprintf_r+0x17e>
 80035e4:	b1b0      	cbz	r0, 8003614 <_svfiprintf_r+0x110>
 80035e6:	9207      	str	r2, [sp, #28]
 80035e8:	e014      	b.n	8003614 <_svfiprintf_r+0x110>
 80035ea:	eba0 0308 	sub.w	r3, r0, r8
 80035ee:	fa09 f303 	lsl.w	r3, r9, r3
 80035f2:	4313      	orrs	r3, r2
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	46a2      	mov	sl, r4
 80035f8:	e7d2      	b.n	80035a0 <_svfiprintf_r+0x9c>
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	9103      	str	r1, [sp, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	bfbb      	ittet	lt
 8003606:	425b      	neglt	r3, r3
 8003608:	f042 0202 	orrlt.w	r2, r2, #2
 800360c:	9307      	strge	r3, [sp, #28]
 800360e:	9307      	strlt	r3, [sp, #28]
 8003610:	bfb8      	it	lt
 8003612:	9204      	strlt	r2, [sp, #16]
 8003614:	7823      	ldrb	r3, [r4, #0]
 8003616:	2b2e      	cmp	r3, #46	; 0x2e
 8003618:	d10c      	bne.n	8003634 <_svfiprintf_r+0x130>
 800361a:	7863      	ldrb	r3, [r4, #1]
 800361c:	2b2a      	cmp	r3, #42	; 0x2a
 800361e:	d135      	bne.n	800368c <_svfiprintf_r+0x188>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	9203      	str	r2, [sp, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	bfb8      	it	lt
 800362c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003630:	3402      	adds	r4, #2
 8003632:	9305      	str	r3, [sp, #20]
 8003634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003700 <_svfiprintf_r+0x1fc>
 8003638:	7821      	ldrb	r1, [r4, #0]
 800363a:	2203      	movs	r2, #3
 800363c:	4650      	mov	r0, sl
 800363e:	f7fc fdcf 	bl	80001e0 <memchr>
 8003642:	b140      	cbz	r0, 8003656 <_svfiprintf_r+0x152>
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	eba0 000a 	sub.w	r0, r0, sl
 800364a:	fa03 f000 	lsl.w	r0, r3, r0
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	4303      	orrs	r3, r0
 8003652:	3401      	adds	r4, #1
 8003654:	9304      	str	r3, [sp, #16]
 8003656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365a:	4826      	ldr	r0, [pc, #152]	; (80036f4 <_svfiprintf_r+0x1f0>)
 800365c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003660:	2206      	movs	r2, #6
 8003662:	f7fc fdbd 	bl	80001e0 <memchr>
 8003666:	2800      	cmp	r0, #0
 8003668:	d038      	beq.n	80036dc <_svfiprintf_r+0x1d8>
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <_svfiprintf_r+0x1f4>)
 800366c:	bb1b      	cbnz	r3, 80036b6 <_svfiprintf_r+0x1b2>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	3307      	adds	r3, #7
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	3308      	adds	r3, #8
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367c:	4433      	add	r3, r6
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	e767      	b.n	8003552 <_svfiprintf_r+0x4e>
 8003682:	fb0c 3202 	mla	r2, ip, r2, r3
 8003686:	460c      	mov	r4, r1
 8003688:	2001      	movs	r0, #1
 800368a:	e7a5      	b.n	80035d8 <_svfiprintf_r+0xd4>
 800368c:	2300      	movs	r3, #0
 800368e:	3401      	adds	r4, #1
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	4619      	mov	r1, r3
 8003694:	f04f 0c0a 	mov.w	ip, #10
 8003698:	4620      	mov	r0, r4
 800369a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800369e:	3a30      	subs	r2, #48	; 0x30
 80036a0:	2a09      	cmp	r2, #9
 80036a2:	d903      	bls.n	80036ac <_svfiprintf_r+0x1a8>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0c5      	beq.n	8003634 <_svfiprintf_r+0x130>
 80036a8:	9105      	str	r1, [sp, #20]
 80036aa:	e7c3      	b.n	8003634 <_svfiprintf_r+0x130>
 80036ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80036b0:	4604      	mov	r4, r0
 80036b2:	2301      	movs	r3, #1
 80036b4:	e7f0      	b.n	8003698 <_svfiprintf_r+0x194>
 80036b6:	ab03      	add	r3, sp, #12
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	462a      	mov	r2, r5
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <_svfiprintf_r+0x1f8>)
 80036be:	a904      	add	r1, sp, #16
 80036c0:	4638      	mov	r0, r7
 80036c2:	f3af 8000 	nop.w
 80036c6:	1c42      	adds	r2, r0, #1
 80036c8:	4606      	mov	r6, r0
 80036ca:	d1d6      	bne.n	800367a <_svfiprintf_r+0x176>
 80036cc:	89ab      	ldrh	r3, [r5, #12]
 80036ce:	065b      	lsls	r3, r3, #25
 80036d0:	f53f af2c 	bmi.w	800352c <_svfiprintf_r+0x28>
 80036d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d6:	b01d      	add	sp, #116	; 0x74
 80036d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036dc:	ab03      	add	r3, sp, #12
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	462a      	mov	r2, r5
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <_svfiprintf_r+0x1f8>)
 80036e4:	a904      	add	r1, sp, #16
 80036e6:	4638      	mov	r0, r7
 80036e8:	f000 f87a 	bl	80037e0 <_printf_i>
 80036ec:	e7eb      	b.n	80036c6 <_svfiprintf_r+0x1c2>
 80036ee:	bf00      	nop
 80036f0:	080040e0 	.word	0x080040e0
 80036f4:	080040ea 	.word	0x080040ea
 80036f8:	00000000 	.word	0x00000000
 80036fc:	0800344d 	.word	0x0800344d
 8003700:	080040e6 	.word	0x080040e6

08003704 <_printf_common>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	4616      	mov	r6, r2
 800370a:	4699      	mov	r9, r3
 800370c:	688a      	ldr	r2, [r1, #8]
 800370e:	690b      	ldr	r3, [r1, #16]
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	4293      	cmp	r3, r2
 8003716:	bfb8      	it	lt
 8003718:	4613      	movlt	r3, r2
 800371a:	6033      	str	r3, [r6, #0]
 800371c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003720:	4607      	mov	r7, r0
 8003722:	460c      	mov	r4, r1
 8003724:	b10a      	cbz	r2, 800372a <_printf_common+0x26>
 8003726:	3301      	adds	r3, #1
 8003728:	6033      	str	r3, [r6, #0]
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	0699      	lsls	r1, r3, #26
 800372e:	bf42      	ittt	mi
 8003730:	6833      	ldrmi	r3, [r6, #0]
 8003732:	3302      	addmi	r3, #2
 8003734:	6033      	strmi	r3, [r6, #0]
 8003736:	6825      	ldr	r5, [r4, #0]
 8003738:	f015 0506 	ands.w	r5, r5, #6
 800373c:	d106      	bne.n	800374c <_printf_common+0x48>
 800373e:	f104 0a19 	add.w	sl, r4, #25
 8003742:	68e3      	ldr	r3, [r4, #12]
 8003744:	6832      	ldr	r2, [r6, #0]
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	42ab      	cmp	r3, r5
 800374a:	dc26      	bgt.n	800379a <_printf_common+0x96>
 800374c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003750:	1e13      	subs	r3, r2, #0
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	bf18      	it	ne
 8003756:	2301      	movne	r3, #1
 8003758:	0692      	lsls	r2, r2, #26
 800375a:	d42b      	bmi.n	80037b4 <_printf_common+0xb0>
 800375c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d01e      	beq.n	80037a8 <_printf_common+0xa4>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	68e5      	ldr	r5, [r4, #12]
 800376e:	6832      	ldr	r2, [r6, #0]
 8003770:	f003 0306 	and.w	r3, r3, #6
 8003774:	2b04      	cmp	r3, #4
 8003776:	bf08      	it	eq
 8003778:	1aad      	subeq	r5, r5, r2
 800377a:	68a3      	ldr	r3, [r4, #8]
 800377c:	6922      	ldr	r2, [r4, #16]
 800377e:	bf0c      	ite	eq
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	2500      	movne	r5, #0
 8003786:	4293      	cmp	r3, r2
 8003788:	bfc4      	itt	gt
 800378a:	1a9b      	subgt	r3, r3, r2
 800378c:	18ed      	addgt	r5, r5, r3
 800378e:	2600      	movs	r6, #0
 8003790:	341a      	adds	r4, #26
 8003792:	42b5      	cmp	r5, r6
 8003794:	d11a      	bne.n	80037cc <_printf_common+0xc8>
 8003796:	2000      	movs	r0, #0
 8003798:	e008      	b.n	80037ac <_printf_common+0xa8>
 800379a:	2301      	movs	r3, #1
 800379c:	4652      	mov	r2, sl
 800379e:	4649      	mov	r1, r9
 80037a0:	4638      	mov	r0, r7
 80037a2:	47c0      	blx	r8
 80037a4:	3001      	adds	r0, #1
 80037a6:	d103      	bne.n	80037b0 <_printf_common+0xac>
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7c6      	b.n	8003742 <_printf_common+0x3e>
 80037b4:	18e1      	adds	r1, r4, r3
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	2030      	movs	r0, #48	; 0x30
 80037ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037be:	4422      	add	r2, r4
 80037c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c8:	3302      	adds	r3, #2
 80037ca:	e7c7      	b.n	800375c <_printf_common+0x58>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4622      	mov	r2, r4
 80037d0:	4649      	mov	r1, r9
 80037d2:	4638      	mov	r0, r7
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0e6      	beq.n	80037a8 <_printf_common+0xa4>
 80037da:	3601      	adds	r6, #1
 80037dc:	e7d9      	b.n	8003792 <_printf_common+0x8e>
	...

080037e0 <_printf_i>:
 80037e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	7e0f      	ldrb	r7, [r1, #24]
 80037e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e8:	2f78      	cmp	r7, #120	; 0x78
 80037ea:	4691      	mov	r9, r2
 80037ec:	4680      	mov	r8, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	469a      	mov	sl, r3
 80037f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037f6:	d807      	bhi.n	8003808 <_printf_i+0x28>
 80037f8:	2f62      	cmp	r7, #98	; 0x62
 80037fa:	d80a      	bhi.n	8003812 <_printf_i+0x32>
 80037fc:	2f00      	cmp	r7, #0
 80037fe:	f000 80d8 	beq.w	80039b2 <_printf_i+0x1d2>
 8003802:	2f58      	cmp	r7, #88	; 0x58
 8003804:	f000 80a3 	beq.w	800394e <_printf_i+0x16e>
 8003808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003810:	e03a      	b.n	8003888 <_printf_i+0xa8>
 8003812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003816:	2b15      	cmp	r3, #21
 8003818:	d8f6      	bhi.n	8003808 <_printf_i+0x28>
 800381a:	a101      	add	r1, pc, #4	; (adr r1, 8003820 <_printf_i+0x40>)
 800381c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003820:	08003879 	.word	0x08003879
 8003824:	0800388d 	.word	0x0800388d
 8003828:	08003809 	.word	0x08003809
 800382c:	08003809 	.word	0x08003809
 8003830:	08003809 	.word	0x08003809
 8003834:	08003809 	.word	0x08003809
 8003838:	0800388d 	.word	0x0800388d
 800383c:	08003809 	.word	0x08003809
 8003840:	08003809 	.word	0x08003809
 8003844:	08003809 	.word	0x08003809
 8003848:	08003809 	.word	0x08003809
 800384c:	08003999 	.word	0x08003999
 8003850:	080038bd 	.word	0x080038bd
 8003854:	0800397b 	.word	0x0800397b
 8003858:	08003809 	.word	0x08003809
 800385c:	08003809 	.word	0x08003809
 8003860:	080039bb 	.word	0x080039bb
 8003864:	08003809 	.word	0x08003809
 8003868:	080038bd 	.word	0x080038bd
 800386c:	08003809 	.word	0x08003809
 8003870:	08003809 	.word	0x08003809
 8003874:	08003983 	.word	0x08003983
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	602a      	str	r2, [r5, #0]
 8003880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003888:	2301      	movs	r3, #1
 800388a:	e0a3      	b.n	80039d4 <_printf_i+0x1f4>
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	6829      	ldr	r1, [r5, #0]
 8003890:	0606      	lsls	r6, r0, #24
 8003892:	f101 0304 	add.w	r3, r1, #4
 8003896:	d50a      	bpl.n	80038ae <_printf_i+0xce>
 8003898:	680e      	ldr	r6, [r1, #0]
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	2e00      	cmp	r6, #0
 800389e:	da03      	bge.n	80038a8 <_printf_i+0xc8>
 80038a0:	232d      	movs	r3, #45	; 0x2d
 80038a2:	4276      	negs	r6, r6
 80038a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a8:	485e      	ldr	r0, [pc, #376]	; (8003a24 <_printf_i+0x244>)
 80038aa:	230a      	movs	r3, #10
 80038ac:	e019      	b.n	80038e2 <_printf_i+0x102>
 80038ae:	680e      	ldr	r6, [r1, #0]
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038b6:	bf18      	it	ne
 80038b8:	b236      	sxthne	r6, r6
 80038ba:	e7ef      	b.n	800389c <_printf_i+0xbc>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	1d19      	adds	r1, r3, #4
 80038c2:	6029      	str	r1, [r5, #0]
 80038c4:	0601      	lsls	r1, r0, #24
 80038c6:	d501      	bpl.n	80038cc <_printf_i+0xec>
 80038c8:	681e      	ldr	r6, [r3, #0]
 80038ca:	e002      	b.n	80038d2 <_printf_i+0xf2>
 80038cc:	0646      	lsls	r6, r0, #25
 80038ce:	d5fb      	bpl.n	80038c8 <_printf_i+0xe8>
 80038d0:	881e      	ldrh	r6, [r3, #0]
 80038d2:	4854      	ldr	r0, [pc, #336]	; (8003a24 <_printf_i+0x244>)
 80038d4:	2f6f      	cmp	r7, #111	; 0x6f
 80038d6:	bf0c      	ite	eq
 80038d8:	2308      	moveq	r3, #8
 80038da:	230a      	movne	r3, #10
 80038dc:	2100      	movs	r1, #0
 80038de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038e2:	6865      	ldr	r5, [r4, #4]
 80038e4:	60a5      	str	r5, [r4, #8]
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	bfa2      	ittt	ge
 80038ea:	6821      	ldrge	r1, [r4, #0]
 80038ec:	f021 0104 	bicge.w	r1, r1, #4
 80038f0:	6021      	strge	r1, [r4, #0]
 80038f2:	b90e      	cbnz	r6, 80038f8 <_printf_i+0x118>
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	d04d      	beq.n	8003994 <_printf_i+0x1b4>
 80038f8:	4615      	mov	r5, r2
 80038fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80038fe:	fb03 6711 	mls	r7, r3, r1, r6
 8003902:	5dc7      	ldrb	r7, [r0, r7]
 8003904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003908:	4637      	mov	r7, r6
 800390a:	42bb      	cmp	r3, r7
 800390c:	460e      	mov	r6, r1
 800390e:	d9f4      	bls.n	80038fa <_printf_i+0x11a>
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10b      	bne.n	800392c <_printf_i+0x14c>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	07de      	lsls	r6, r3, #31
 8003918:	d508      	bpl.n	800392c <_printf_i+0x14c>
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	6861      	ldr	r1, [r4, #4]
 800391e:	4299      	cmp	r1, r3
 8003920:	bfde      	ittt	le
 8003922:	2330      	movle	r3, #48	; 0x30
 8003924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800392c:	1b52      	subs	r2, r2, r5
 800392e:	6122      	str	r2, [r4, #16]
 8003930:	f8cd a000 	str.w	sl, [sp]
 8003934:	464b      	mov	r3, r9
 8003936:	aa03      	add	r2, sp, #12
 8003938:	4621      	mov	r1, r4
 800393a:	4640      	mov	r0, r8
 800393c:	f7ff fee2 	bl	8003704 <_printf_common>
 8003940:	3001      	adds	r0, #1
 8003942:	d14c      	bne.n	80039de <_printf_i+0x1fe>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	b004      	add	sp, #16
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394e:	4835      	ldr	r0, [pc, #212]	; (8003a24 <_printf_i+0x244>)
 8003950:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	f851 6b04 	ldr.w	r6, [r1], #4
 800395c:	6029      	str	r1, [r5, #0]
 800395e:	061d      	lsls	r5, r3, #24
 8003960:	d514      	bpl.n	800398c <_printf_i+0x1ac>
 8003962:	07df      	lsls	r7, r3, #31
 8003964:	bf44      	itt	mi
 8003966:	f043 0320 	orrmi.w	r3, r3, #32
 800396a:	6023      	strmi	r3, [r4, #0]
 800396c:	b91e      	cbnz	r6, 8003976 <_printf_i+0x196>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	f023 0320 	bic.w	r3, r3, #32
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	2310      	movs	r3, #16
 8003978:	e7b0      	b.n	80038dc <_printf_i+0xfc>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	2378      	movs	r3, #120	; 0x78
 8003984:	4828      	ldr	r0, [pc, #160]	; (8003a28 <_printf_i+0x248>)
 8003986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800398a:	e7e3      	b.n	8003954 <_printf_i+0x174>
 800398c:	0659      	lsls	r1, r3, #25
 800398e:	bf48      	it	mi
 8003990:	b2b6      	uxthmi	r6, r6
 8003992:	e7e6      	b.n	8003962 <_printf_i+0x182>
 8003994:	4615      	mov	r5, r2
 8003996:	e7bb      	b.n	8003910 <_printf_i+0x130>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	6826      	ldr	r6, [r4, #0]
 800399c:	6961      	ldr	r1, [r4, #20]
 800399e:	1d18      	adds	r0, r3, #4
 80039a0:	6028      	str	r0, [r5, #0]
 80039a2:	0635      	lsls	r5, r6, #24
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0x1cc>
 80039a8:	6019      	str	r1, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0x1d2>
 80039ac:	0670      	lsls	r0, r6, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0x1c8>
 80039b0:	8019      	strh	r1, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	4615      	mov	r5, r2
 80039b8:	e7ba      	b.n	8003930 <_printf_i+0x150>
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	1d1a      	adds	r2, r3, #4
 80039be:	602a      	str	r2, [r5, #0]
 80039c0:	681d      	ldr	r5, [r3, #0]
 80039c2:	6862      	ldr	r2, [r4, #4]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4628      	mov	r0, r5
 80039c8:	f7fc fc0a 	bl	80001e0 <memchr>
 80039cc:	b108      	cbz	r0, 80039d2 <_printf_i+0x1f2>
 80039ce:	1b40      	subs	r0, r0, r5
 80039d0:	6060      	str	r0, [r4, #4]
 80039d2:	6863      	ldr	r3, [r4, #4]
 80039d4:	6123      	str	r3, [r4, #16]
 80039d6:	2300      	movs	r3, #0
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039dc:	e7a8      	b.n	8003930 <_printf_i+0x150>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	462a      	mov	r2, r5
 80039e2:	4649      	mov	r1, r9
 80039e4:	4640      	mov	r0, r8
 80039e6:	47d0      	blx	sl
 80039e8:	3001      	adds	r0, #1
 80039ea:	d0ab      	beq.n	8003944 <_printf_i+0x164>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	079b      	lsls	r3, r3, #30
 80039f0:	d413      	bmi.n	8003a1a <_printf_i+0x23a>
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bfb8      	it	lt
 80039fa:	4618      	movlt	r0, r3
 80039fc:	e7a4      	b.n	8003948 <_printf_i+0x168>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4632      	mov	r2, r6
 8003a02:	4649      	mov	r1, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	47d0      	blx	sl
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d09b      	beq.n	8003944 <_printf_i+0x164>
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	9903      	ldr	r1, [sp, #12]
 8003a12:	1a5b      	subs	r3, r3, r1
 8003a14:	42ab      	cmp	r3, r5
 8003a16:	dcf2      	bgt.n	80039fe <_printf_i+0x21e>
 8003a18:	e7eb      	b.n	80039f2 <_printf_i+0x212>
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	f104 0619 	add.w	r6, r4, #25
 8003a20:	e7f5      	b.n	8003a0e <_printf_i+0x22e>
 8003a22:	bf00      	nop
 8003a24:	080040f1 	.word	0x080040f1
 8003a28:	08004102 	.word	0x08004102

08003a2c <memcpy>:
 8003a2c:	440a      	add	r2, r1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a34:	d100      	bne.n	8003a38 <memcpy+0xc>
 8003a36:	4770      	bx	lr
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a42:	4291      	cmp	r1, r2
 8003a44:	d1f9      	bne.n	8003a3a <memcpy+0xe>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <memmove>:
 8003a48:	4288      	cmp	r0, r1
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	eb01 0402 	add.w	r4, r1, r2
 8003a50:	d902      	bls.n	8003a58 <memmove+0x10>
 8003a52:	4284      	cmp	r4, r0
 8003a54:	4623      	mov	r3, r4
 8003a56:	d807      	bhi.n	8003a68 <memmove+0x20>
 8003a58:	1e43      	subs	r3, r0, #1
 8003a5a:	42a1      	cmp	r1, r4
 8003a5c:	d008      	beq.n	8003a70 <memmove+0x28>
 8003a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a66:	e7f8      	b.n	8003a5a <memmove+0x12>
 8003a68:	4402      	add	r2, r0
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	428a      	cmp	r2, r1
 8003a6e:	d100      	bne.n	8003a72 <memmove+0x2a>
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a7a:	e7f7      	b.n	8003a6c <memmove+0x24>

08003a7c <_free_r>:
 8003a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	d044      	beq.n	8003b0c <_free_r+0x90>
 8003a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a86:	9001      	str	r0, [sp, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a8e:	bfb8      	it	lt
 8003a90:	18e4      	addlt	r4, r4, r3
 8003a92:	f000 f913 	bl	8003cbc <__malloc_lock>
 8003a96:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <_free_r+0x94>)
 8003a98:	9801      	ldr	r0, [sp, #4]
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	b933      	cbnz	r3, 8003aac <_free_r+0x30>
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	6014      	str	r4, [r2, #0]
 8003aa2:	b003      	add	sp, #12
 8003aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aa8:	f000 b90e 	b.w	8003cc8 <__malloc_unlock>
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d908      	bls.n	8003ac2 <_free_r+0x46>
 8003ab0:	6825      	ldr	r5, [r4, #0]
 8003ab2:	1961      	adds	r1, r4, r5
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	bf01      	itttt	eq
 8003ab8:	6819      	ldreq	r1, [r3, #0]
 8003aba:	685b      	ldreq	r3, [r3, #4]
 8003abc:	1949      	addeq	r1, r1, r5
 8003abe:	6021      	streq	r1, [r4, #0]
 8003ac0:	e7ed      	b.n	8003a9e <_free_r+0x22>
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b10b      	cbz	r3, 8003acc <_free_r+0x50>
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d9fa      	bls.n	8003ac2 <_free_r+0x46>
 8003acc:	6811      	ldr	r1, [r2, #0]
 8003ace:	1855      	adds	r5, r2, r1
 8003ad0:	42a5      	cmp	r5, r4
 8003ad2:	d10b      	bne.n	8003aec <_free_r+0x70>
 8003ad4:	6824      	ldr	r4, [r4, #0]
 8003ad6:	4421      	add	r1, r4
 8003ad8:	1854      	adds	r4, r2, r1
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	6011      	str	r1, [r2, #0]
 8003ade:	d1e0      	bne.n	8003aa2 <_free_r+0x26>
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	6053      	str	r3, [r2, #4]
 8003ae6:	4421      	add	r1, r4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	e7da      	b.n	8003aa2 <_free_r+0x26>
 8003aec:	d902      	bls.n	8003af4 <_free_r+0x78>
 8003aee:	230c      	movs	r3, #12
 8003af0:	6003      	str	r3, [r0, #0]
 8003af2:	e7d6      	b.n	8003aa2 <_free_r+0x26>
 8003af4:	6825      	ldr	r5, [r4, #0]
 8003af6:	1961      	adds	r1, r4, r5
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf04      	itt	eq
 8003afc:	6819      	ldreq	r1, [r3, #0]
 8003afe:	685b      	ldreq	r3, [r3, #4]
 8003b00:	6063      	str	r3, [r4, #4]
 8003b02:	bf04      	itt	eq
 8003b04:	1949      	addeq	r1, r1, r5
 8003b06:	6021      	streq	r1, [r4, #0]
 8003b08:	6054      	str	r4, [r2, #4]
 8003b0a:	e7ca      	b.n	8003aa2 <_free_r+0x26>
 8003b0c:	b003      	add	sp, #12
 8003b0e:	bd30      	pop	{r4, r5, pc}
 8003b10:	20000160 	.word	0x20000160

08003b14 <sbrk_aligned>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	4e0e      	ldr	r6, [pc, #56]	; (8003b50 <sbrk_aligned+0x3c>)
 8003b18:	460c      	mov	r4, r1
 8003b1a:	6831      	ldr	r1, [r6, #0]
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b911      	cbnz	r1, 8003b26 <sbrk_aligned+0x12>
 8003b20:	f000 f8bc 	bl	8003c9c <_sbrk_r>
 8003b24:	6030      	str	r0, [r6, #0]
 8003b26:	4621      	mov	r1, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 f8b7 	bl	8003c9c <_sbrk_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d00a      	beq.n	8003b48 <sbrk_aligned+0x34>
 8003b32:	1cc4      	adds	r4, r0, #3
 8003b34:	f024 0403 	bic.w	r4, r4, #3
 8003b38:	42a0      	cmp	r0, r4
 8003b3a:	d007      	beq.n	8003b4c <sbrk_aligned+0x38>
 8003b3c:	1a21      	subs	r1, r4, r0
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 f8ac 	bl	8003c9c <_sbrk_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d101      	bne.n	8003b4c <sbrk_aligned+0x38>
 8003b48:	f04f 34ff 	mov.w	r4, #4294967295
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	20000164 	.word	0x20000164

08003b54 <_malloc_r>:
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	4607      	mov	r7, r0
 8003b6a:	db01      	blt.n	8003b70 <_malloc_r+0x1c>
 8003b6c:	42a9      	cmp	r1, r5
 8003b6e:	d905      	bls.n	8003b7c <_malloc_r+0x28>
 8003b70:	230c      	movs	r3, #12
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	2600      	movs	r6, #0
 8003b76:	4630      	mov	r0, r6
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	4e2e      	ldr	r6, [pc, #184]	; (8003c38 <_malloc_r+0xe4>)
 8003b7e:	f000 f89d 	bl	8003cbc <__malloc_lock>
 8003b82:	6833      	ldr	r3, [r6, #0]
 8003b84:	461c      	mov	r4, r3
 8003b86:	bb34      	cbnz	r4, 8003bd6 <_malloc_r+0x82>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f7ff ffc2 	bl	8003b14 <sbrk_aligned>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	4604      	mov	r4, r0
 8003b94:	d14d      	bne.n	8003c32 <_malloc_r+0xde>
 8003b96:	6834      	ldr	r4, [r6, #0]
 8003b98:	4626      	mov	r6, r4
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d140      	bne.n	8003c20 <_malloc_r+0xcc>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	eb04 0803 	add.w	r8, r4, r3
 8003ba8:	f000 f878 	bl	8003c9c <_sbrk_r>
 8003bac:	4580      	cmp	r8, r0
 8003bae:	d13a      	bne.n	8003c26 <_malloc_r+0xd2>
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	3503      	adds	r5, #3
 8003bb4:	1a6d      	subs	r5, r5, r1
 8003bb6:	f025 0503 	bic.w	r5, r5, #3
 8003bba:	3508      	adds	r5, #8
 8003bbc:	2d0c      	cmp	r5, #12
 8003bbe:	bf38      	it	cc
 8003bc0:	250c      	movcc	r5, #12
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff ffa5 	bl	8003b14 <sbrk_aligned>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d02b      	beq.n	8003c26 <_malloc_r+0xd2>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	442b      	add	r3, r5
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	e00e      	b.n	8003bf4 <_malloc_r+0xa0>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	1b52      	subs	r2, r2, r5
 8003bda:	d41e      	bmi.n	8003c1a <_malloc_r+0xc6>
 8003bdc:	2a0b      	cmp	r2, #11
 8003bde:	d916      	bls.n	8003c0e <_malloc_r+0xba>
 8003be0:	1961      	adds	r1, r4, r5
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	6025      	str	r5, [r4, #0]
 8003be6:	bf18      	it	ne
 8003be8:	6059      	strne	r1, [r3, #4]
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	bf08      	it	eq
 8003bee:	6031      	streq	r1, [r6, #0]
 8003bf0:	5162      	str	r2, [r4, r5]
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f104 060b 	add.w	r6, r4, #11
 8003bfa:	f000 f865 	bl	8003cc8 <__malloc_unlock>
 8003bfe:	f026 0607 	bic.w	r6, r6, #7
 8003c02:	1d23      	adds	r3, r4, #4
 8003c04:	1af2      	subs	r2, r6, r3
 8003c06:	d0b6      	beq.n	8003b76 <_malloc_r+0x22>
 8003c08:	1b9b      	subs	r3, r3, r6
 8003c0a:	50a3      	str	r3, [r4, r2]
 8003c0c:	e7b3      	b.n	8003b76 <_malloc_r+0x22>
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	bf0c      	ite	eq
 8003c14:	6032      	streq	r2, [r6, #0]
 8003c16:	605a      	strne	r2, [r3, #4]
 8003c18:	e7ec      	b.n	8003bf4 <_malloc_r+0xa0>
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	6864      	ldr	r4, [r4, #4]
 8003c1e:	e7b2      	b.n	8003b86 <_malloc_r+0x32>
 8003c20:	4634      	mov	r4, r6
 8003c22:	6876      	ldr	r6, [r6, #4]
 8003c24:	e7b9      	b.n	8003b9a <_malloc_r+0x46>
 8003c26:	230c      	movs	r3, #12
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f000 f84c 	bl	8003cc8 <__malloc_unlock>
 8003c30:	e7a1      	b.n	8003b76 <_malloc_r+0x22>
 8003c32:	6025      	str	r5, [r4, #0]
 8003c34:	e7de      	b.n	8003bf4 <_malloc_r+0xa0>
 8003c36:	bf00      	nop
 8003c38:	20000160 	.word	0x20000160

08003c3c <_realloc_r>:
 8003c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c40:	4680      	mov	r8, r0
 8003c42:	4614      	mov	r4, r2
 8003c44:	460e      	mov	r6, r1
 8003c46:	b921      	cbnz	r1, 8003c52 <_realloc_r+0x16>
 8003c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	f7ff bf81 	b.w	8003b54 <_malloc_r>
 8003c52:	b92a      	cbnz	r2, 8003c60 <_realloc_r+0x24>
 8003c54:	f7ff ff12 	bl	8003a7c <_free_r>
 8003c58:	4625      	mov	r5, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c60:	f000 f838 	bl	8003cd4 <_malloc_usable_size_r>
 8003c64:	4284      	cmp	r4, r0
 8003c66:	4607      	mov	r7, r0
 8003c68:	d802      	bhi.n	8003c70 <_realloc_r+0x34>
 8003c6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c6e:	d812      	bhi.n	8003c96 <_realloc_r+0x5a>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4640      	mov	r0, r8
 8003c74:	f7ff ff6e 	bl	8003b54 <_malloc_r>
 8003c78:	4605      	mov	r5, r0
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d0ed      	beq.n	8003c5a <_realloc_r+0x1e>
 8003c7e:	42bc      	cmp	r4, r7
 8003c80:	4622      	mov	r2, r4
 8003c82:	4631      	mov	r1, r6
 8003c84:	bf28      	it	cs
 8003c86:	463a      	movcs	r2, r7
 8003c88:	f7ff fed0 	bl	8003a2c <memcpy>
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7ff fef4 	bl	8003a7c <_free_r>
 8003c94:	e7e1      	b.n	8003c5a <_realloc_r+0x1e>
 8003c96:	4635      	mov	r5, r6
 8003c98:	e7df      	b.n	8003c5a <_realloc_r+0x1e>
	...

08003c9c <_sbrk_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d06      	ldr	r5, [pc, #24]	; (8003cb8 <_sbrk_r+0x1c>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	f7fd fad2 	bl	8001250 <_sbrk>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_sbrk_r+0x1a>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_sbrk_r+0x1a>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20000168 	.word	0x20000168

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f000 b811 	b.w	8003ce4 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	2000016c 	.word	0x2000016c

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f000 b80c 	b.w	8003ce6 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	2000016c 	.word	0x2000016c

08003cd4 <_malloc_usable_size_r>:
 8003cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd8:	1f18      	subs	r0, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bfbc      	itt	lt
 8003cde:	580b      	ldrlt	r3, [r1, r0]
 8003ce0:	18c0      	addlt	r0, r0, r3
 8003ce2:	4770      	bx	lr

08003ce4 <__retarget_lock_acquire_recursive>:
 8003ce4:	4770      	bx	lr

08003ce6 <__retarget_lock_release_recursive>:
 8003ce6:	4770      	bx	lr

08003ce8 <ceil>:
 8003ce8:	ec51 0b10 	vmov	r0, r1, d0
 8003cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003cf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003cf8:	2e13      	cmp	r6, #19
 8003cfa:	ee10 5a10 	vmov	r5, s0
 8003cfe:	ee10 8a10 	vmov	r8, s0
 8003d02:	460c      	mov	r4, r1
 8003d04:	dc30      	bgt.n	8003d68 <ceil+0x80>
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	da12      	bge.n	8003d30 <ceil+0x48>
 8003d0a:	a335      	add	r3, pc, #212	; (adr r3, 8003de0 <ceil+0xf8>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc fabc 	bl	800028c <__adddf3>
 8003d14:	2200      	movs	r2, #0
 8003d16:	2300      	movs	r3, #0
 8003d18:	f7fc fcec 	bl	80006f4 <__aeabi_dcmpgt>
 8003d1c:	b128      	cbz	r0, 8003d2a <ceil+0x42>
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	db55      	blt.n	8003dce <ceil+0xe6>
 8003d22:	432c      	orrs	r4, r5
 8003d24:	d057      	beq.n	8003dd6 <ceil+0xee>
 8003d26:	4c30      	ldr	r4, [pc, #192]	; (8003de8 <ceil+0x100>)
 8003d28:	2500      	movs	r5, #0
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	e025      	b.n	8003d7c <ceil+0x94>
 8003d30:	4f2e      	ldr	r7, [pc, #184]	; (8003dec <ceil+0x104>)
 8003d32:	4137      	asrs	r7, r6
 8003d34:	ea01 0307 	and.w	r3, r1, r7
 8003d38:	4303      	orrs	r3, r0
 8003d3a:	d01f      	beq.n	8003d7c <ceil+0x94>
 8003d3c:	a328      	add	r3, pc, #160	; (adr r3, 8003de0 <ceil+0xf8>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc faa3 	bl	800028c <__adddf3>
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f7fc fcd3 	bl	80006f4 <__aeabi_dcmpgt>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d0eb      	beq.n	8003d2a <ceil+0x42>
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	bfc2      	ittt	gt
 8003d56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8003d5a:	fa43 f606 	asrgt.w	r6, r3, r6
 8003d5e:	19a4      	addgt	r4, r4, r6
 8003d60:	ea24 0407 	bic.w	r4, r4, r7
 8003d64:	2500      	movs	r5, #0
 8003d66:	e7e0      	b.n	8003d2a <ceil+0x42>
 8003d68:	2e33      	cmp	r6, #51	; 0x33
 8003d6a:	dd0b      	ble.n	8003d84 <ceil+0x9c>
 8003d6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003d70:	d104      	bne.n	8003d7c <ceil+0x94>
 8003d72:	ee10 2a10 	vmov	r2, s0
 8003d76:	460b      	mov	r3, r1
 8003d78:	f7fc fa88 	bl	800028c <__adddf3>
 8003d7c:	ec41 0b10 	vmov	d0, r0, r1
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	fa23 f707 	lsr.w	r7, r3, r7
 8003d90:	4207      	tst	r7, r0
 8003d92:	d0f3      	beq.n	8003d7c <ceil+0x94>
 8003d94:	a312      	add	r3, pc, #72	; (adr r3, 8003de0 <ceil+0xf8>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fa77 	bl	800028c <__adddf3>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2300      	movs	r3, #0
 8003da2:	f7fc fca7 	bl	80006f4 <__aeabi_dcmpgt>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d0bf      	beq.n	8003d2a <ceil+0x42>
 8003daa:	2c00      	cmp	r4, #0
 8003dac:	dd02      	ble.n	8003db4 <ceil+0xcc>
 8003dae:	2e14      	cmp	r6, #20
 8003db0:	d103      	bne.n	8003dba <ceil+0xd2>
 8003db2:	3401      	adds	r4, #1
 8003db4:	ea25 0507 	bic.w	r5, r5, r7
 8003db8:	e7b7      	b.n	8003d2a <ceil+0x42>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003dc0:	fa03 f606 	lsl.w	r6, r3, r6
 8003dc4:	4435      	add	r5, r6
 8003dc6:	4545      	cmp	r5, r8
 8003dc8:	bf38      	it	cc
 8003dca:	18e4      	addcc	r4, r4, r3
 8003dcc:	e7f2      	b.n	8003db4 <ceil+0xcc>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003dd4:	e7a9      	b.n	8003d2a <ceil+0x42>
 8003dd6:	4625      	mov	r5, r4
 8003dd8:	e7a7      	b.n	8003d2a <ceil+0x42>
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w
 8003de0:	8800759c 	.word	0x8800759c
 8003de4:	7e37e43c 	.word	0x7e37e43c
 8003de8:	3ff00000 	.word	0x3ff00000
 8003dec:	000fffff 	.word	0x000fffff

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
